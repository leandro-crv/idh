{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Leandro Carvalho\\\\Desktop\\\\Projetos\\\\IDH\\\\idh-jogo\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Card from \"./components/Card/Card\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Baralho from \"./components/Baralho/Baralho\";\nimport Mandante from \"./components/Jogador/Mandante\";\nimport Visitante from \"./components/Jogador/Visitante\";\nimport Cabecalho from \"./components/cabecalho/Cabecalho\";\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\";\nimport { findFlagUrlByCountryName } from \"country-flags-svg\";\nimport Placar from \"./components/Placar/Placar\";\nimport NumeroDeCartas from \"./components/Jogar/NumeroDeCartas\";\nimport Rodape from \"./components/Rodape/Rodape\";\nimport Mesa from \"./components/Mesa/Mesa\";\nimport Informacao from \"./components/Informacao/Informacao\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar fs = require('fs');\n\nvar path = require('path'); //ideia -> Pegar os primeiros elementos dos arrays para jogar\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mesa: Array.from({\n        length: bd.length\n      }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada: null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false\n      },\n      jogoEmAndamento: false,\n      bandeiras: false,\n      cartasEmTransicao: false,\n      infoCat: false\n    };\n  }\n\n  InformacaoCategoria(categoria) {\n    console.log('foi chamado o app com a categoria', categoria);\n  }\n\n  TodosIds() {\n    let todosIds = [];\n\n    for (let i = 0; i < bd.length; i++) {\n      todosIds.push(bd[i].id);\n    }\n\n    return todosIds;\n  }\n\n  PegarDoBanco(ids) {\n    if (Array.isArray(ids)) {\n      const dados = [];\n      ids.map(ids => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              pais: bd[i].pais,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: bd[i].bandeira\n            });\n          }\n        }\n      });\n      return dados;\n    } else {\n      return {\n        id: bd[ids].id,\n        pais: bd[ids].pais,\n        idh: bd[ids].idh,\n        exp: bd[ids].exp,\n        bandeira: bd[ids].bandeira\n      };\n    }\n  }\n\n  DistribuirCartas(indices) {\n    var novoIndice = [];\n    indices.map((e, index) => index > 1 ? novoIndice.push(e) : '');\n    var estadoAntigo = this.state;\n    this.setState({\n      mesa: novoIndice,\n      mandante: {\n        carta: this.PegarDoBanco(indices[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar,\n        ultimaJogada: estadoAntigo.mandante.ultimaJogada\n      },\n      visitante: {\n        carta: this.PegarDoBanco(indices[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n      jogoEmAndamento: true,\n      bandeiras: this.BuscarBandeiras(indices),\n      cartasEmTransicao: false\n    });\n  }\n\n  BuscarBandeiras(array) {\n    var arrayBandeiras = [];\n\n    for (let i = 0; i < array.length; i++) {\n      arrayBandeiras.push({\n        id: array[i],\n        nome: bd[array[i]].pais,\n        bandeira: bd[array[i]].bandeira,\n        visivel: true\n      });\n    }\n\n    arrayBandeiras.sort(function (a, b) {\n      return a.nome > b.nome ? 1 : b.nome > a.nome ? -1 : 0;\n    });\n    return arrayBandeiras;\n  }\n\n  JogadaMandante(jogada) {\n    let prevState = this.state;\n    let buscarValor = this.state.mandante.carta[jogada];\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada]);\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar);\n    this.setState({\n      mandante: {\n        carta: prevState.mandante.carta,\n        visivel: true,\n        placar: placar.mandante,\n        ultimaJogada: jogada\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado: {\n        texto: placar.mensagemVencedor,\n        visivel: true\n      },\n      cartasEmTransicao: true\n    });\n    setTimeout(() => {\n      this.escurecerBandeiras(this.state.mandante.carta.id, this.state.visitante.carta.id);\n      this.ProximaJogada(this.state.mesa);\n    }, 3000);\n  }\n\n  escurecerBandeiras(b1, b2) {\n    let band = this.state.bandeiras;\n    band.map(e => {\n      if (e.id == b1 | e.id == b2) {\n        e.visivel = false;\n      }\n    });\n  }\n\n  ProximaJogada(cartas) {\n    if (cartas.length == 0) {\n      this.FimDeJogo();\n    } else {\n      const prevState = this.state;\n      let novaMesa = [];\n      cartas.map((e, index) => index > 1 ? novaMesa.push(e) : '');\n      this.setState({\n        mesa: novaMesa,\n        mandante: {\n          carta: this.PegarDoBanco(cartas[0]),\n          visivel: true,\n          placar: prevState.mandante.placar,\n          ultimaJogada: null\n        },\n        visitante: {\n          carta: this.PegarDoBanco(cartas[1]),\n          visivel: false,\n          placar: prevState.visitante.placar\n        },\n        resultado: {\n          texto: null,\n          visivel: false\n        },\n        cartasEmTransicao: false\n      });\n    }\n  }\n\n  FimDeJogo() {\n    let m = this.state.mandante.placar;\n    let v = this.state.visitante.placar;\n    let vencedorFinal = '';\n\n    if (m == v) {\n      vencedorFinal = 'Fim de jogo: Empate!';\n    } else if (m > v) {\n      vencedorFinal = 'Fim de jogo: Mandante Venceu!';\n    } else {\n      vencedorFinal = 'Fim de jogo: Visitante Venceu!';\n    }\n\n    this.setState({\n      resultado: {\n        texto: vencedorFinal,\n        visivel: true\n      }\n    });\n  }\n\n  RecomeÃ§arJogo() {\n    var primeiroEstado = {\n      mesa: Array.from({\n        length: bd.length\n      }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada: null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false\n      },\n      jogoEmAndamento: false,\n      bandeiras: false,\n      cartasEmTransicao: false\n    };\n    this.setState(primeiroEstado);\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor: 'Empatou!'\n    };\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1;\n      placar.mensagemVencedor = 'Ganhou!';\n      return placar;\n    } else if (vencedor == 'visitante') {\n      placar.visitante += 1;\n      placar.mensagemVencedor = 'Perdeu!';\n      return placar;\n    } else {\n      return placar;\n    }\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp') {\n      if (valorMandante == valorVisitante) {\n        return 'empate';\n      } else if (valorMandante > valorVisitante) {\n        return 'mandante';\n      } else {\n        return 'visitante';\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"conteudo\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"cabecalho\",\n        children: /*#__PURE__*/_jsxDEV(Cabecalho, {\n          vencedorFinal: this.state.vencedorFinal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"principal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"bandeiras\",\n          children: /*#__PURE__*/_jsxDEV(Bandeiras, {\n            bandeiras: this.state.bandeiras\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Informacao, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"mandante\",\n          children: /*#__PURE__*/_jsxDEV(Mandante, {\n            carta: this.state.mandante.carta,\n            JogadaMandante: this.JogadaMandante.bind(this),\n            visivel: this.state.mandante.visivel,\n            resultado: this.state.resultado.texto,\n            ultimaJogada: this.state.mandante.ultimaJogada,\n            placar: this.state.mandante.placar,\n            transicao: this.state.cartasEmTransicao,\n            InformacaoCategoria: this.InformacaoCategoria.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"visitante\",\n          children: /*#__PURE__*/_jsxDEV(Visitante, {\n            carta: this.state.visitante.carta,\n            visivel: this.state.visitante.visivel,\n            resultado: this.state.resultado.texto,\n            placar: this.state.visitante.placar,\n            transicao: this.state.cartasEmTransicao,\n            InformacaoCategoria: this.InformacaoCategoria.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"jogar\",\n          children: [/*#__PURE__*/_jsxDEV(Jogar, {\n            DistribuirCartas: this.DistribuirCartas.bind(this),\n            resultado: this.state.resultado,\n            jogoEmAndamento: this.state.jogoEmAndamento,\n            RecomeÃ§arJogo: this.RecomeÃ§arJogo.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Mesa, {\n            cartas: this.state.mesa,\n            jogoEmAndamento: this.state.jogoEmAndamento\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"rodape\",\n        children: /*#__PURE__*/_jsxDEV(Rodape, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n{\n  /* <Bandeiras bandeirasInicio={this.BandeirasInicio()} /> */\n}\nexport default App;","map":{"version":3,"sources":["C:/Users/Leandro Carvalho/Desktop/Projetos/IDH/idh-jogo/src/App.js"],"names":["React","Component","Card","Jogar","bd","Baralho","Mandante","Visitante","Cabecalho","Bandeiras","findFlagUrlByCountryName","Placar","NumeroDeCartas","Rodape","Mesa","Informacao","fs","require","path","App","constructor","state","mesa","Array","from","length","v","k","mandante","carta","visivel","placar","ultimaJogada","visitante","resultado","texto","jogoEmAndamento","bandeiras","cartasEmTransicao","infoCat","InformacaoCategoria","categoria","console","log","TodosIds","todosIds","i","push","id","PegarDoBanco","ids","isArray","dados","map","pais","idh","exp","bandeira","DistribuirCartas","indices","novoIndice","e","index","estadoAntigo","setState","BuscarBandeiras","array","arrayBandeiras","nome","sort","a","b","JogadaMandante","jogada","prevState","buscarValor","vencedor","CompararJogada","AlterarPlacar","mensagemVencedor","setTimeout","escurecerBandeiras","ProximaJogada","b1","b2","band","cartas","FimDeJogo","novaMesa","m","vencedorFinal","RecomeÃ§arJogo","primeiroEstado","mandanteAtual","visitanteAtual","tipo","valorMandante","valorVisitante","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport './App.css';\nimport Card from \"./components/Card/Card\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Baralho from \"./components/Baralho/Baralho\"\nimport Mandante from \"./components/Jogador/Mandante\"\nimport Visitante from \"./components/Jogador/Visitante\"\nimport Cabecalho from \"./components/cabecalho/Cabecalho\";\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\"\nimport { findFlagUrlByCountryName } from \"country-flags-svg\";\nimport Placar from \"./components/Placar/Placar\";\nimport NumeroDeCartas from \"./components/Jogar/NumeroDeCartas\";\nimport Rodape from \"./components/Rodape/Rodape\"\n\nimport Mesa from \"./components/Mesa/Mesa\"\nimport Informacao from \"./components/Informacao/Informacao\"\nvar fs = require('fs');\nvar path = require('path');\n\n\n\n\n\n//ideia -> Pegar os primeiros elementos dos arrays para jogar\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      mesa: Array.from({ length: bd.length }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada: null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false,\n      },\n      jogoEmAndamento: false,\n      bandeiras: false,\n      cartasEmTransicao:false,\n      infoCat:false\n\n\n    }\n  }\n\n  InformacaoCategoria(categoria){\n    console.log('foi chamado o app com a categoria',categoria)\n  }\n\n\n  TodosIds() {\n\n    let todosIds = []\n    for (let i = 0; i < bd.length; i++) {\n      todosIds.push(bd[i].id)\n    }\n\n\n    return todosIds\n  }\n\n  PegarDoBanco(ids) {\n\n    if (Array.isArray(ids)) {\n      const dados = []\n      ids.map((ids) => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              pais: bd[i].pais,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: bd[i].bandeira\n\n            })\n          }\n        }\n      })\n\n      return dados\n    }\n    else {\n      return (\n        {\n          id: bd[ids].id,\n          pais: bd[ids].pais,\n          idh: bd[ids].idh,\n          exp: bd[ids].exp,\n          bandeira: bd[ids].bandeira\n        }\n      )\n    }\n\n\n  }\n\n  DistribuirCartas(indices) {\n\n\n    var novoIndice = []\n    indices.map((e, index) => index > 1 ? novoIndice.push(e) : '')\n\n\n\n    var estadoAntigo = this.state\n\n\n\n    this.setState({\n      mesa: novoIndice,\n      mandante: {\n        carta: this.PegarDoBanco(indices[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar,\n        ultimaJogada: estadoAntigo.mandante.ultimaJogada\n      },\n      visitante: {\n        carta: this.PegarDoBanco(indices[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n      jogoEmAndamento: true,\n      bandeiras: this.BuscarBandeiras(indices),\n      cartasEmTransicao:false\n\n    })\n\n\n\n  }\n\n\n\n  BuscarBandeiras(array) {\n    var arrayBandeiras = []\n    for (let i = 0; i < array.length; i++) {\n      arrayBandeiras.push({\n        id: array[i],\n        nome: bd[array[i]].pais,\n        bandeira: bd[array[i]].bandeira,\n        visivel: true\n      })\n    }\n\n    arrayBandeiras.sort(function (a, b) {\n\n      return (a.nome > b.nome) ? 1 : ((b.nome > a.nome) ? -1 : 0);\n\n    });\n    return arrayBandeiras\n  }\n\n\n\n  JogadaMandante(jogada) {\n\n    let prevState = this.state\n\n    let buscarValor = this.state.mandante.carta[jogada]\n\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada])\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar)\n\n\n\n    this.setState({\n      mandante: {\n        carta: prevState.mandante.carta,\n        visivel: true,\n        placar: placar.mandante,\n        ultimaJogada: jogada\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado: {\n        texto: placar.mensagemVencedor,\n        visivel: true\n      },\n      cartasEmTransicao:true\n     \n    })\n\n    setTimeout(() => {\n      this.escurecerBandeiras(this.state.mandante.carta.id, this.state.visitante.carta.id)\n       this.ProximaJogada(this.state.mesa)\n\n    }, 3000);\n\n  }\n\n  escurecerBandeiras(b1, b2) {\n\n    let band = this.state.bandeiras\n\n    band.map((e) => {\n      if (e.id == b1 | e.id == b2) {\n        e.visivel = false\n      }\n    })\n\n  }\n\n  ProximaJogada(cartas) {\n\n    if (cartas.length == 0) {\n      this.FimDeJogo()\n    }\n    else {\n      const prevState = this.state\n\n      let novaMesa = [];\n      cartas.map((e, index) => index > 1 ? novaMesa.push(e) : '')\n\n\n\n\n      this.setState({\n        mesa: novaMesa,\n        mandante: {\n          carta: this.PegarDoBanco(cartas[0]),\n          visivel: true,\n          placar: prevState.mandante.placar,\n          ultimaJogada: null\n\n        },\n        visitante: {\n          carta: this.PegarDoBanco(cartas[1]),\n          visivel: false,\n          placar: prevState.visitante.placar\n        },\n        resultado: {\n          texto: null,\n          visivel: false,\n        },\n        cartasEmTransicao:false\n      })\n    }\n\n  }\n\n  FimDeJogo() {\n    \n    let m = this.state.mandante.placar\n    let v = this.state.visitante.placar\n    let vencedorFinal = ''\n    if (m == v) {\n      vencedorFinal = ('Fim de jogo: Empate!')\n    }\n    else if (m>v) {\n      vencedorFinal = ('Fim de jogo: Mandante Venceu!')\n    }\n    else {\n      vencedorFinal = ('Fim de jogo: Visitante Venceu!')\n    }\n\n    this.setState({\n      resultado: {\n        texto: vencedorFinal,\n        visivel: true\n      }\n    })\n  }\n\n  RecomeÃ§arJogo() {\n\n    var primeiroEstado = {\n      mesa: Array.from({ length: bd.length }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada: null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false,\n      },\n      jogoEmAndamento: false,\n      bandeiras: false,\n      cartasEmTransicao:false\n    }\n    this.setState(primeiroEstado)\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n\n\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor: 'Empatou!'\n    }\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1\n      placar.mensagemVencedor = 'Ganhou!'\n      return placar\n\n\n    }\n    else if (vencedor == 'visitante') {\n      placar.visitante += 1\n      placar.mensagemVencedor = 'Perdeu!'\n      return placar\n\n    } else {\n      return placar\n    }\n\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp') {\n      if (valorMandante == valorVisitante) {\n        return 'empate'\n      }\n      else if (valorMandante > valorVisitante) {\n        return 'mandante'\n      }\n      else {\n        return 'visitante'\n      }\n    }\n  }\n\n\n\n  render() {\n    return (\n      <section className=\"conteudo\" >\n\n        <div id='cabecalho'>\n          <Cabecalho vencedorFinal={this.state.vencedorFinal} />\n        </div>\n        <div id=\"principal\">\n          <div id='bandeiras'>\n            <Bandeiras bandeiras={this.state.bandeiras} />\n          </div>\n            <Informacao />\n\n          <div id='mandante' >\n            <Mandante carta={this.state.mandante.carta}  JogadaMandante={this.JogadaMandante.bind(this)} visivel={this.state.mandante.visivel} resultado={this.state.resultado.texto} ultimaJogada={this.state.mandante.ultimaJogada} placar={this.state.mandante.placar} transicao={this.state.cartasEmTransicao} InformacaoCategoria = {this.InformacaoCategoria.bind(this)}/>\n          </div>\n          <div id='visitante'>\n\n            <Visitante carta={this.state.visitante.carta} visivel={this.state.visitante.visivel} resultado={this.state.resultado.texto} placar={this.state.visitante.placar} transicao={this.state.cartasEmTransicao} InformacaoCategoria = {this.InformacaoCategoria.bind(this)}/>\n          </div>\n          <div id='jogar'>\n\n            <Jogar DistribuirCartas={this.DistribuirCartas.bind(this)} resultado={this.state.resultado} jogoEmAndamento={this.state.jogoEmAndamento} RecomeÃ§arJogo={this.RecomeÃ§arJogo.bind(this)} />\n            <Mesa cartas={this.state.mesa} jogoEmAndamento={this.state.jogoEmAndamento} />\n          </div>\n        </div>\n        <div id='rodape'>\n          <Rodape />\n        </div>\n\n      </section>\n    )\n  }\n\n\n}\n\n{/* <Bandeiras bandeirasInicio={this.BandeirasInicio()} /> */ }\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}