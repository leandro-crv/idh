{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Leandro Carvalho\\\\Desktop\\\\Projetos\\\\IDH\\\\idh-jogo\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\";\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Cabecalho from \"./components/cabecalho/Cabecalho\";\nimport Informacao from \"./components/Informacao/Informacao\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport Mandante from \"./components/Jogador/Mandante\";\nimport Mesa from \"./components/Mesa/Mesa\";\nimport Rodape from \"./components/Rodape/Rodape\";\nimport Visitante from \"./components/Jogador/Visitante\";\nimport s from \"./stateInicial\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    console.log('s é', s);\n    this.state = s;\n    /*     this.state = {\n          mesa: Array.from({ length: bd.length }, (v, k) => k + 1),\n          mandante: {\n            carta: null,\n            visivel: false,\n            placar: 0,\n            ultimaJogada: null\n          },\n          visitante: {\n            carta: null,\n            visivel: false,\n            placar: 0\n          },\n          resultado: {\n            texto: null,\n            visivel: false,\n          },\n          jogoEmAndamento: false,\n          bandeiras: false,\n          cartasEmTransicao:false,\n          informacaoNoCard:false\n    \n    \n        } */\n  }\n\n  InformacaoCategoria(categoria) {\n    if (!categoria) {\n      this.setState({\n        informacaoNoCard: false\n      });\n    } else {\n      this.setState({\n        informacaoNoCard: categoria\n      });\n    }\n  }\n\n  PegarDoBanco(ids) {\n    if (Array.isArray(ids)) {\n      const dados = [];\n      ids.map(ids => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              pais: bd[i].pais,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: bd[i].bandeira\n            });\n          }\n        }\n      });\n      return dados;\n    } else {\n      return {\n        id: bd[ids].id,\n        pais: bd[ids].pais,\n        idh: bd[ids].idh,\n        exp: bd[ids].exp,\n        bandeira: bd[ids].bandeira\n      };\n    }\n  }\n\n  DistribuirCartas(indices) {\n    var novoIndice = [];\n    indices.map((e, index) => index > 1 ? novoIndice.push(e) : '');\n    var estadoAntigo = this.state;\n    this.setState({\n      mesa: novoIndice,\n      mandante: {\n        carta: this.PegarDoBanco(indices[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar,\n        ultimaJogada: estadoAntigo.mandante.ultimaJogada\n      },\n      visitante: {\n        carta: this.PegarDoBanco(indices[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n      jogoEmAndamento: true,\n      bandeiras: this.BuscarBandeiras(indices),\n      cartasEmTransicao: false\n    });\n  }\n\n  BuscarBandeiras(array) {\n    var arrayBandeiras = [];\n\n    for (let i = 0; i < array.length; i++) {\n      arrayBandeiras.push({\n        id: array[i],\n        nome: bd[array[i]].pais,\n        bandeira: bd[array[i]].bandeira,\n        visivel: true\n      });\n    }\n\n    arrayBandeiras.sort(function (a, b) {\n      return a.nome > b.nome ? 1 : b.nome > a.nome ? -1 : 0;\n    });\n    return arrayBandeiras;\n  }\n\n  JogadaMandante(jogada) {\n    let prevState = this.state;\n    let buscarValor = this.state.mandante.carta[jogada];\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada]);\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar);\n    this.setState({\n      mandante: {\n        carta: prevState.mandante.carta,\n        visivel: true,\n        placar: placar.mandante,\n        ultimaJogada: jogada\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado: {\n        texto: placar.mensagemVencedor,\n        visivel: true\n      },\n      cartasEmTransicao: true\n    });\n    setTimeout(() => {\n      this.escurecerBandeiras(this.state.mandante.carta.id, this.state.visitante.carta.id);\n      this.ProximaJogada(this.state.mesa);\n    }, 3000);\n  }\n\n  escurecerBandeiras(b1, b2) {\n    let band = this.state.bandeiras;\n    band.map(e => {\n      if (e.id == b1 | e.id == b2) {\n        e.visivel = false;\n      }\n    });\n  }\n\n  ProximaJogada(cartas) {\n    if (cartas.length == 0) {\n      this.FimDeJogo();\n    } else {\n      const prevState = this.state;\n      let novaMesa = [];\n      cartas.map((e, index) => index > 1 ? novaMesa.push(e) : '');\n      this.setState({\n        mesa: novaMesa,\n        mandante: {\n          carta: this.PegarDoBanco(cartas[0]),\n          visivel: true,\n          placar: prevState.mandante.placar,\n          ultimaJogada: null\n        },\n        visitante: {\n          carta: this.PegarDoBanco(cartas[1]),\n          visivel: false,\n          placar: prevState.visitante.placar\n        },\n        resultado: {\n          texto: null,\n          visivel: false\n        },\n        cartasEmTransicao: false\n      });\n    }\n  }\n\n  FimDeJogo() {\n    let m = this.state.mandante.placar;\n    let v = this.state.visitante.placar;\n    let vencedorFinal = '';\n\n    if (m == v) {\n      vencedorFinal = 'Fim de jogo: Empate!';\n    } else if (m > v) {\n      vencedorFinal = 'Fim de jogo: Mandante Venceu!';\n    } else {\n      vencedorFinal = 'Fim de jogo: Visitante Venceu!';\n    }\n\n    this.setState({\n      resultado: {\n        texto: vencedorFinal,\n        visivel: true\n      }\n    });\n  }\n\n  RecomeçarJogo() {\n    var primeiroEstado = {\n      mesa: Array.from({\n        length: bd.length\n      }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada: null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false\n      },\n      jogoEmAndamento: false,\n      bandeiras: false,\n      cartasEmTransicao: false,\n      informacaoNoCard: false\n    };\n    this.setState(primeiroEstado);\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor: 'Empatou!'\n    };\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1;\n      placar.mensagemVencedor = 'Ganhou!';\n      return placar;\n    } else if (vencedor == 'visitante') {\n      placar.visitante += 1;\n      placar.mensagemVencedor = 'Perdeu!';\n      return placar;\n    } else {\n      return placar;\n    }\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp') {\n      if (valorMandante == valorVisitante) {\n        return 'empate';\n      } else if (valorMandante > valorVisitante) {\n        return 'mandante';\n      } else {\n        return 'visitante';\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"conteudo\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"cabecalho\",\n        children: /*#__PURE__*/_jsxDEV(Cabecalho, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"principal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"bandeiras\",\n          children: /*#__PURE__*/_jsxDEV(Bandeiras, {\n            bandeiras: this.state.bandeiras\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Informacao, {\n          info: this.state.informacaoNoCard,\n          InformacaoCategoria: this.InformacaoCategoria.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"mandante\",\n          children: /*#__PURE__*/_jsxDEV(Mandante, {\n            carta: this.state.mandante.carta,\n            JogadaMandante: this.JogadaMandante.bind(this),\n            visivel: this.state.mandante.visivel,\n            resultado: this.state.resultado.texto,\n            ultimaJogada: this.state.mandante.ultimaJogada,\n            placar: this.state.mandante.placar,\n            transicao: this.state.cartasEmTransicao,\n            InformacaoCategoria: this.InformacaoCategoria.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"visitante\",\n          children: /*#__PURE__*/_jsxDEV(Visitante, {\n            carta: this.state.visitante.carta,\n            visivel: this.state.visitante.visivel,\n            resultado: this.state.resultado.texto,\n            placar: this.state.visitante.placar,\n            transicao: this.state.cartasEmTransicao,\n            InformacaoCategoria: this.InformacaoCategoria.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"jogar\",\n          children: [/*#__PURE__*/_jsxDEV(Jogar, {\n            DistribuirCartas: this.DistribuirCartas.bind(this),\n            resultado: this.state.resultado,\n            jogoEmAndamento: this.state.jogoEmAndamento,\n            RecomeçarJogo: this.RecomeçarJogo.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Mesa, {\n            cartas: this.state.mesa,\n            jogoEmAndamento: this.state.jogoEmAndamento\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"rodape\",\n        children: /*#__PURE__*/_jsxDEV(Rodape, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Leandro Carvalho/Desktop/Projetos/IDH/idh-jogo/src/App.js"],"names":["React","Component","Bandeiras","bd","Cabecalho","Informacao","Jogar","Mandante","Mesa","Rodape","Visitante","s","App","constructor","console","log","state","InformacaoCategoria","categoria","setState","informacaoNoCard","PegarDoBanco","ids","Array","isArray","dados","map","i","length","id","push","pais","idh","exp","bandeira","DistribuirCartas","indices","novoIndice","e","index","estadoAntigo","mesa","mandante","carta","visivel","placar","ultimaJogada","visitante","jogoEmAndamento","bandeiras","BuscarBandeiras","cartasEmTransicao","array","arrayBandeiras","nome","sort","a","b","JogadaMandante","jogada","prevState","buscarValor","vencedor","CompararJogada","AlterarPlacar","resultado","texto","mensagemVencedor","setTimeout","escurecerBandeiras","ProximaJogada","b1","b2","band","cartas","FimDeJogo","novaMesa","m","v","vencedorFinal","RecomeçarJogo","primeiroEstado","from","k","mandanteAtual","visitanteAtual","tipo","valorMandante","valorVisitante","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport './App.css';\n\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\"\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Cabecalho from \"./components/cabecalho/Cabecalho\";\nimport Informacao from \"./components/Informacao/Informacao\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport Mandante from \"./components/Jogador/Mandante\";\nimport Mesa from \"./components/Mesa/Mesa\";\nimport Rodape from \"./components/Rodape/Rodape\";\nimport Visitante from \"./components/Jogador/Visitante\";\nimport s from \"./stateInicial\"\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    console.log('s é',s)\n    this.state = s\n/*     this.state = {\n      mesa: Array.from({ length: bd.length }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada: null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false,\n      },\n      jogoEmAndamento: false,\n      bandeiras: false,\n      cartasEmTransicao:false,\n      informacaoNoCard:false\n\n\n    } */\n  }\n\n  InformacaoCategoria(categoria){\n   \n    if(!categoria){\n      this.setState({\n        informacaoNoCard:false\n      })\n    }\n    else{\n      this.setState({\n        informacaoNoCard:categoria\n      })\n    }\n  }\n\n\n\n\n  PegarDoBanco(ids) {\n\n    if (Array.isArray(ids)) {\n      const dados = []\n      ids.map((ids) => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              pais: bd[i].pais,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: bd[i].bandeira\n\n            })\n          }\n        }\n      })\n\n      return dados\n    }\n    else {\n      return (\n        {\n          id: bd[ids].id,\n          pais: bd[ids].pais,\n          idh: bd[ids].idh,\n          exp: bd[ids].exp,\n          bandeira: bd[ids].bandeira\n        }\n      )\n    }\n\n\n  }\n\n  DistribuirCartas(indices) {\n    var novoIndice = []\n    indices.map((e, index) => index > 1 ? novoIndice.push(e) : '')\n    var estadoAntigo = this.state\n    \n    this.setState({\n      mesa: novoIndice,\n      mandante: {\n        carta: this.PegarDoBanco(indices[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar,\n        ultimaJogada: estadoAntigo.mandante.ultimaJogada\n      },\n      visitante: {\n        carta: this.PegarDoBanco(indices[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n      jogoEmAndamento: true,\n      bandeiras: this.BuscarBandeiras(indices),\n      cartasEmTransicao:false\n\n    })\n  }\n\n\n\n  BuscarBandeiras(array) {\n    var arrayBandeiras = []\n    for (let i = 0; i < array.length; i++) {\n      arrayBandeiras.push({\n        id: array[i],\n        nome: bd[array[i]].pais,\n        bandeira: bd[array[i]].bandeira,\n        visivel: true\n      })\n    }\n\n    arrayBandeiras.sort(function (a, b) {\n\n      return (a.nome > b.nome) ? 1 : ((b.nome > a.nome) ? -1 : 0);\n\n    });\n    return arrayBandeiras\n  }\n\n\n\n  JogadaMandante(jogada) {\n\n    let prevState = this.state\n\n    let buscarValor = this.state.mandante.carta[jogada]\n\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada])\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar)\n\n\n\n    this.setState({\n      mandante: {\n        carta: prevState.mandante.carta,\n        visivel: true,\n        placar: placar.mandante,\n        ultimaJogada: jogada\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado: {\n        texto: placar.mensagemVencedor,\n        visivel: true\n      },\n      cartasEmTransicao:true\n     \n    })\n\n    setTimeout(() => {\n      this.escurecerBandeiras(this.state.mandante.carta.id, this.state.visitante.carta.id)\n       this.ProximaJogada(this.state.mesa)\n\n    }, 3000);\n\n  }\n\n  escurecerBandeiras(b1, b2) {\n\n    let band = this.state.bandeiras\n\n    band.map((e) => {\n      if (e.id == b1 | e.id == b2) {\n        e.visivel = false\n      }\n    })\n\n  }\n\n  ProximaJogada(cartas) {\n\n    if (cartas.length == 0) {\n      this.FimDeJogo()\n    }\n    else {\n      const prevState = this.state\n\n      let novaMesa = [];\n      cartas.map((e, index) => index > 1 ? novaMesa.push(e) : '')\n\n\n\n\n      this.setState({\n        mesa: novaMesa,\n        mandante: {\n          carta: this.PegarDoBanco(cartas[0]),\n          visivel: true,\n          placar: prevState.mandante.placar,\n          ultimaJogada: null\n\n        },\n        visitante: {\n          carta: this.PegarDoBanco(cartas[1]),\n          visivel: false,\n          placar: prevState.visitante.placar\n        },\n        resultado: {\n          texto: null,\n          visivel: false,\n        },\n        cartasEmTransicao:false\n      })\n    }\n\n  }\n\n  FimDeJogo() {\n    \n    let m = this.state.mandante.placar\n    let v = this.state.visitante.placar\n    let vencedorFinal = ''\n    if (m == v) {\n      vencedorFinal = ('Fim de jogo: Empate!')\n    }\n    else if (m>v) {\n      vencedorFinal = ('Fim de jogo: Mandante Venceu!')\n    }\n    else {\n      vencedorFinal = ('Fim de jogo: Visitante Venceu!')\n    }\n\n    this.setState({\n      resultado: {\n        texto: vencedorFinal,\n        visivel: true\n      }\n    })\n  }\n\n  RecomeçarJogo() {\n\n    var primeiroEstado = {\n      mesa: Array.from({ length: bd.length }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada: null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false,\n      },\n      jogoEmAndamento: false,\n      bandeiras: false,\n      cartasEmTransicao:false,\n      informacaoNoCard:false\n    }\n    this.setState(primeiroEstado)\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n\n\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor: 'Empatou!'\n    }\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1\n      placar.mensagemVencedor = 'Ganhou!'\n      return placar\n\n\n    }\n    else if (vencedor == 'visitante') {\n      placar.visitante += 1\n      placar.mensagemVencedor = 'Perdeu!'\n      return placar\n\n    } else {\n      return placar\n    }\n\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp') {\n      if (valorMandante == valorVisitante) {\n        return 'empate'\n      }\n      else if (valorMandante > valorVisitante) {\n        return 'mandante'\n      }\n      else {\n        return 'visitante'\n      }\n    }\n  }\n\n\n\n  render() {\n    return (\n      <section className=\"conteudo\" >\n\n        <div id='cabecalho'>\n          <Cabecalho />\n        </div>\n        <div id=\"principal\">\n          <div id='bandeiras'>\n            <Bandeiras bandeiras={this.state.bandeiras} />\n          </div>\n            <Informacao info={this.state.informacaoNoCard} InformacaoCategoria={this.InformacaoCategoria.bind(this)}/>\n\n          <div id='mandante' >\n            <Mandante carta={this.state.mandante.carta}  JogadaMandante={this.JogadaMandante.bind(this)} visivel={this.state.mandante.visivel} resultado={this.state.resultado.texto} ultimaJogada={this.state.mandante.ultimaJogada} placar={this.state.mandante.placar} transicao={this.state.cartasEmTransicao} InformacaoCategoria = {this.InformacaoCategoria.bind(this)}/>\n          </div>\n          <div id='visitante'>\n\n            <Visitante carta={this.state.visitante.carta} visivel={this.state.visitante.visivel} resultado={this.state.resultado.texto} placar={this.state.visitante.placar} transicao={this.state.cartasEmTransicao} InformacaoCategoria = {this.InformacaoCategoria.bind(this)}/>\n          </div>\n          <div id='jogar'>\n\n            <Jogar DistribuirCartas={this.DistribuirCartas.bind(this)} resultado={this.state.resultado} jogoEmAndamento={this.state.jogoEmAndamento} RecomeçarJogo={this.RecomeçarJogo.bind(this)} />\n\n            <Mesa cartas={this.state.mesa} jogoEmAndamento={this.state.jogoEmAndamento} />\n          </div>\n        </div>\n        <div id='rodape'>\n          <Rodape />\n        </div>\n\n      </section>\n    )\n  }\n\n\n}\n\n\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}