{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Leandro Carvalho\\\\Desktop\\\\Projetos\\\\IDH\\\\idh-jogo\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Card from \"./components/Card/Card\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Baralho from \"./components/Baralho/Baralho\";\nimport Mandante from \"./components/Jogador/Mandante\";\nimport Visitante from \"./components/Jogador/Visitante\";\nimport Cabecalho from \"./components/cabecalho/Cabecalho\";\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\";\nimport { findFlagUrlByCountryName } from \"country-flags-svg\";\nimport Placar from \"./components/Placar/Placar\";\nimport Mesa from \"./components/Mesa/Mesa\"; //ideia -> Pegar os primeiros elementos dos arrays para jogar\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mesa: Array.from({\n        length: bd.length\n      }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false\n      }\n    };\n  }\n\n  TodosIds() {\n    let todosIds = [];\n\n    for (let i = 0; i < bd.length; i++) {\n      todosIds.push(bd[i].id);\n    }\n\n    return todosIds;\n  }\n\n  PegarDoBanco(ids) {\n    if (Array.isArray(ids)) {\n      const dados = [];\n      ids.map(ids => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              país: bd[i].país,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: findFlagUrlByCountryName(bd[i].país)\n            });\n          }\n        }\n      });\n      return dados;\n    } else {\n      return {\n        id: bd[ids].id,\n        país: bd[ids].país,\n        idh: bd[ids].idh,\n        exp: bd[ids].exp,\n        bandeira: findFlagUrlByCountryName(bd[ids].país)\n      };\n    }\n  }\n\n  DistribuirCartas(indices) {\n    if (indices.length % 2 == 0) {\n      var arrayDeCartas = indices;\n    } else {\n      indices.pop();\n      var arrayDeCartas = indices;\n    }\n\n    console.log('array de cartas é', arrayDeCartas);\n    var estadoAntigo = this.state;\n    console.log('a carta do mandante é:', this.PegarDoBanco(arrayDeCartas[0]));\n    var remover2 = indices.splice(0, 2);\n    this.setState({\n      mesa: indices,\n      mandante: {\n        carta: this.PegarDoBanco(arrayDeCartas[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar\n      },\n      visitante: {\n        carta: this.PegarDoBanco(arrayDeCartas[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      }\n    });\n  }\n\n  BandeirasInicio() {\n    let ordenaPaises = [];\n\n    for (let i = 0; i < bd.length; i++) {\n      ordenaPaises.push(bd[i].país);\n    }\n\n    ordenaPaises.sort();\n    let arrayBandeiras = [];\n\n    for (let i = 0; i < ordenaPaises.length; i++) {\n      arrayBandeiras.push({\n        nome: ordenaPaises[i],\n        bandeira: findFlagUrlByCountryName(ordenaPaises[i])\n      });\n    }\n\n    return arrayBandeiras;\n  }\n\n  JogadaMandante(jogada) {\n    console.log('estou no app e jogada é', jogada);\n    let prevState = this.state;\n    let buscarValor = this.state.mandante.carta[jogada];\n    console.log('o valor é', buscarValor);\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada]);\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar);\n    console.log('retorno da função placar', placar);\n    this.setState({\n      mandante: {\n        carta: prevState.mandante.carta,\n        visivel: true,\n        placar: placar.mandante\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado: {\n        texto: placar.mensagemVencedor,\n        visivel: true\n      }\n    });\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n    console.log('this.state no alterar placar', this.state);\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor: 'Empatou!'\n    };\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1;\n      placar.mensagemVencedor = 'Ganhou!';\n      return placar;\n    } else if (vencedor == 'visitante') {\n      placar.visitante += 1;\n      placar.mensagemVencedor = 'Perdeu!';\n      return placar;\n    } else {\n      return placar;\n    }\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp') {\n      if (valorMandante == valorVisitante) {\n        return 'empate';\n      } else if (valorMandante > valorVisitante) {\n        return 'mandante';\n      } else {\n        return 'visitante';\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"conteudo\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"cabecalho\",\n        children: /*#__PURE__*/_jsxDEV(Cabecalho, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bandeiras\",\n        children: /*#__PURE__*/_jsxDEV(Bandeiras, {\n          bandeirasInicio: this.BandeirasInicio()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"principal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"mandante\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Mandante\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Mandante, {\n            carta: this.state.mandante.carta,\n            JogadaMandante: this.JogadaMandante.bind(this),\n            visivel: this.state.mandante.visivel,\n            resultado: this.state.resultado.texto\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"visitante\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Visitante\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Visitante, {\n            carta: this.state.visitante.carta,\n            visivel: this.state.visitante.visivel,\n            resultado: this.state.resultado.texto\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"jogar\",\n          children: [/*#__PURE__*/_jsxDEV(Jogar, {\n            DistribuirCartas: this.DistribuirCartas.bind(this),\n            resultado: this.state.resultado\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Mesa, {\n            cartas: this.state.mesa\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"placar\",\n        children: /*#__PURE__*/_jsxDEV(Placar, {\n          placarMandante: this.state.mandante.placar,\n          placarVisitante: this.state.visitante.placar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n{\n  /* <Baralho  cartas={this.PegarDoBanco(this.TodosIds())} visivel={this.state.mesa}  /> */\n}\nexport default App;","map":{"version":3,"sources":["C:/Users/Leandro Carvalho/Desktop/Projetos/IDH/idh-jogo/src/App.js"],"names":["React","Component","Card","Jogar","bd","Baralho","Mandante","Visitante","Cabecalho","Bandeiras","findFlagUrlByCountryName","Placar","Mesa","App","constructor","state","mesa","Array","from","length","v","k","mandante","carta","visivel","placar","visitante","resultado","texto","TodosIds","todosIds","i","push","id","PegarDoBanco","ids","isArray","dados","map","país","idh","exp","bandeira","DistribuirCartas","indices","arrayDeCartas","pop","console","log","estadoAntigo","remover2","splice","setState","BandeirasInicio","ordenaPaises","sort","arrayBandeiras","nome","JogadaMandante","jogada","prevState","buscarValor","vencedor","CompararJogada","AlterarPlacar","mensagemVencedor","mandanteAtual","visitanteAtual","tipo","valorMandante","valorVisitante","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport './App.css';\nimport Card from \"./components/Card/Card\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Baralho from \"./components/Baralho/Baralho\"\nimport Mandante from \"./components/Jogador/Mandante\"\nimport Visitante from \"./components/Jogador/Visitante\"\nimport Cabecalho from \"./components/cabecalho/Cabecalho\";\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\"\nimport { findFlagUrlByCountryName } from \"country-flags-svg\";\nimport Placar from \"./components/Placar/Placar\";\n\nimport Mesa from \"./components/Mesa/Mesa\"\n\n//ideia -> Pegar os primeiros elementos dos arrays para jogar\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      mesa: Array.from({ length: bd.length }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false,\n      }\n\n\n    }\n  }\n\n  TodosIds() {\n\n    let todosIds = []\n    for (let i = 0; i < bd.length; i++) {\n      todosIds.push(bd[i].id)\n    }\n\n\n    return todosIds\n  }\n\n  PegarDoBanco(ids) {\n\n    if (Array.isArray(ids)) {\n      const dados = []\n      ids.map((ids) => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              país: bd[i].país,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: findFlagUrlByCountryName(bd[i].país)\n\n            })\n          }\n        }\n      })\n\n      return dados\n    }\n    else {\n      return (\n        {\n          id: bd[ids].id,\n          país: bd[ids].país,\n          idh: bd[ids].idh,\n          exp: bd[ids].exp,\n          bandeira: findFlagUrlByCountryName(bd[ids].país)\n        }\n      )\n    }\n\n\n  }\n\n  DistribuirCartas(indices) {\n\n\n    if (indices.length % 2 == 0) {\n      var arrayDeCartas = indices;\n\n    }\n    else {\n      indices.pop()\n      var arrayDeCartas = indices;\n    }\n\n    console.log('array de cartas é', arrayDeCartas)\n\n    var estadoAntigo = this.state\n\n    console.log('a carta do mandante é:', this.PegarDoBanco(arrayDeCartas[0]))\n    var remover2 = indices.splice(0, 2)\n    this.setState({\n      mesa: indices,\n      mandante: {\n        carta: this.PegarDoBanco(arrayDeCartas[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar\n      },\n      visitante: {\n        carta: this.PegarDoBanco(arrayDeCartas[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n\n\n\n    })\n\n\n\n  }\n\n  BandeirasInicio() {\n    let ordenaPaises = []\n    for (let i = 0; i < bd.length; i++) {\n      ordenaPaises.push(bd[i].país)\n    }\n    ordenaPaises.sort()\n\n    let arrayBandeiras = [];\n\n    for (let i = 0; i < ordenaPaises.length; i++) {\n      arrayBandeiras.push({\n        nome: ordenaPaises[i],\n        bandeira: findFlagUrlByCountryName(ordenaPaises[i])\n      })\n    }\n\n    return arrayBandeiras\n\n  }\n\n  JogadaMandante(jogada) {\n    console.log('estou no app e jogada é', jogada)\n\n    let prevState = this.state\n\n    let buscarValor = this.state.mandante.carta[jogada]\n    console.log('o valor é', buscarValor)\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada])\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar)\n    console.log('retorno da função placar',placar)\n\n    this.setState({\n      mandante:{\n        carta:prevState.mandante.carta,\n        visivel:true,\n        placar:placar.mandante\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado:{\n        texto:placar.mensagemVencedor,\n        visivel:true\n      }\n    })\n\n\n\n\n\n\n\n\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n    console.log('this.state no alterar placar', this.state)\n\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor:'Empatou!'\n    }\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1\n      placar.mensagemVencedor='Ganhou!'\n      return placar\n\n\n    }\n    else if (vencedor == 'visitante') {\n      placar.visitante += 1\n      placar.mensagemVencedor='Perdeu!'\n      return placar\n\n    } else {\n      return placar\n    }\n\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp') {\n      if (valorMandante == valorVisitante) {\n        return 'empate'\n      }\n      else if (valorMandante > valorVisitante) {\n        return 'mandante'\n      }\n      else {\n        return 'visitante'\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <section className=\"conteudo\">\n        <div id='cabecalho'>\n          <Cabecalho />\n        </div>\n        <div id='bandeiras'>\n          <Bandeiras bandeirasInicio={this.BandeirasInicio()} />\n        </div>\n        <div id=\"principal\">\n\n          <div id='mandante'>\n            <h2>Mandante</h2>\n            <Mandante carta={this.state.mandante.carta} JogadaMandante={this.JogadaMandante.bind(this)} visivel={this.state.mandante.visivel} resultado={this.state.resultado.texto} />\n          </div>\n          <div id='visitante'>\n            <h2>Visitante</h2>\n            <Visitante carta={this.state.visitante.carta} visivel={this.state.visitante.visivel} resultado={this.state.resultado.texto}/>\n          </div>\n          <div id='jogar'>\n\n            <Jogar DistribuirCartas={this.DistribuirCartas.bind(this)} resultado={this.state.resultado} />\n            <Mesa cartas={this.state.mesa} />\n          </div>\n        </div>\n        <div id='placar'>\n          <Placar placarMandante={this.state.mandante.placar} placarVisitante={this.state.visitante.placar} />\n        </div>\n\n\n\n      </section>\n    )\n  }\n\n\n}\n\n{/* <Baralho  cartas={this.PegarDoBanco(this.TodosIds())} visivel={this.state.mesa}  /> */ }\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}