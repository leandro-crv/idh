{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leandro\\\\Desktop\\\\projetos\\\\idh\\\\idh-antigo\\\\idh-antigo\\\\idh-jogo\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './assets/reset.css';\nimport \"./assets/App.css\";\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\";\nimport bd from './bancoDeDados/bancoDeDados.js';\nimport ComoJogar from \"./components/ComoJogar/ComoJogar\";\nimport Header from \"./components/Header/Header\";\nimport Fontes from \"./components/Fontes/Fontes\";\nimport Informacao from \"./components/Informacao/Informacao\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport Mandante from \"./components/Jogador/Mandante\";\nimport Mesa from \"./components/Mesa/Mesa\";\nimport Visitante from \"./components/Jogador/Visitante\";\nimport stateInicial from \"./stateInicial\";\nimport Placar from \"./components/Placar/Placar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = stateInicial;\n  }\n\n  InformacaoCategoria(categoria) {\n    if (!categoria) {\n      this.setState({\n        informacaoNoCard: false\n      });\n    } else {\n      this.setState({\n        informacaoNoCard: categoria\n      });\n    }\n  }\n\n  PegarDoBanco(ids) {\n    if (Array.isArray(ids)) {\n      const dados = [];\n      ids.map(ids => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              pais: bd[i].pais,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: bd[i].bandeira,\n              populacao: Number(bd[i].populacao),\n              area: Number(bd[i].area)\n            });\n          }\n        }\n      });\n      return dados;\n    } else {\n      return {\n        id: bd[ids].id,\n        pais: bd[ids].pais,\n        idh: bd[ids].idh,\n        exp: bd[ids].exp,\n        bandeira: bd[ids].bandeira,\n        populacao: Number(bd[ids].populacao),\n        area: Number(bd[ids].area)\n      };\n    }\n  }\n\n  DistribuirCartas(indices, quaisCartas) {\n    var novoIndice = [];\n    indices.map((e, index) => index > 1 ? novoIndice.push(e) : '');\n    var estadoAntigo = this.state;\n    this.setState({\n      mesa: novoIndice,\n      mandante: {\n        carta: this.PegarDoBanco(indices[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar,\n        ultimaJogada: estadoAntigo.mandante.ultimaJogada\n      },\n      visitante: {\n        carta: this.PegarDoBanco(indices[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n      jogoEmAndamento: true,\n      bandeiras: this.BuscarBandeiras(indices),\n      cartasEmTransicao: false,\n      rodada: estadoAntigo.rodada + 1,\n      rodadasTotais: indices.length / 2,\n      quaisCartas: quaisCartas\n    });\n  }\n\n  BuscarBandeiras(array) {\n    var arrayBandeiras = [];\n\n    for (let i = 0; i < array.length; i++) {\n      arrayBandeiras.push({\n        id: array[i],\n        nome: bd[array[i]].pais,\n        bandeira: bd[array[i]].bandeira,\n        visivel: true\n      });\n    }\n\n    arrayBandeiras.sort(function (a, b) {\n      return a.nome.localeCompare(b.nome);\n    });\n    return arrayBandeiras;\n  }\n\n  JogadaMandante(jogada) {\n    let prevState = this.state;\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada]);\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar);\n    this.setState({\n      mandante: {\n        carta: prevState.mandante.carta,\n        visivel: true,\n        placar: placar.mandante,\n        ultimaJogada: jogada\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado: {\n        texto: placar.mensagemVencedor,\n        visivel: true\n      },\n      cartasEmTransicao: true\n    });\n    setTimeout(() => {\n      this.escurecerBandeiras(this.state.mandante.carta.id, this.state.visitante.carta.id);\n      this.ProximaJogada(this.state.mesa);\n    }, 3000);\n  }\n\n  escurecerBandeiras(b1, b2) {\n    let bandeiras = this.state.bandeiras;\n    bandeiras.map(e => {\n      if (e.id == b1 | e.id == b2) {\n        e.visivel = false;\n      }\n    });\n  }\n\n  ProximaJogada(cartas) {\n    if (cartas.length == 0) {\n      this.FimDeJogo();\n    } else {\n      const prevState = this.state;\n      let novaMesa = [];\n      cartas.map((e, index) => index > 1 ? novaMesa.push(e) : '');\n      this.setState({\n        mesa: novaMesa,\n        mandante: {\n          carta: this.PegarDoBanco(cartas[0]),\n          visivel: true,\n          placar: prevState.mandante.placar,\n          ultimaJogada: null\n        },\n        visitante: {\n          carta: this.PegarDoBanco(cartas[1]),\n          visivel: false,\n          placar: prevState.visitante.placar\n        },\n        resultado: {\n          texto: null,\n          visivel: false\n        },\n        cartasEmTransicao: false,\n        rodada: prevState.rodada + 1\n      });\n    }\n  }\n\n  FimDeJogo() {\n    let mandante = this.state.mandante.placar;\n    let visitante = this.state.visitante.placar;\n    let vencedorFinal = '';\n\n    if (mandante == visitante) {\n      vencedorFinal = 'Fim de jogo: Empate!';\n    } else if (mandante > visitante) {\n      vencedorFinal = 'Fim de jogo: Jogador 1 Venceu!';\n    } else {\n      vencedorFinal = 'Fim de jogo: Jogador 2 Venceu!';\n    }\n\n    this.setState({\n      resultado: {\n        texto: vencedorFinal,\n        visivel: true\n      }\n    });\n  }\n\n  RecomeÃ§arJogo() {\n    this.setState(stateInicial);\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor: 'Empatou!'\n    };\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1;\n      placar.mensagemVencedor = 'Ganhou!';\n      return placar;\n    } else if (vencedor == 'visitante') {\n      placar.visitante += 1;\n      placar.mensagemVencedor = 'Perdeu!';\n      return placar;\n    } else {\n      return placar;\n    }\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp' | tipo == 'populacao' | tipo == 'area') {\n      if (valorMandante == valorVisitante) {\n        return 'empate';\n      } else if (valorMandante > valorVisitante) {\n        return 'mandante';\n      } else {\n        return 'visitante';\n      }\n    }\n  }\n\n  comoJogar(x) {\n    this.setState({\n      comoJogar: x\n    });\n  }\n\n  mostrarFontes(x) {\n    this.setState({\n      mostrarFontes: x\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"conteudo\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(Header, {\n          comoJogar: this.comoJogar.bind(this),\n          mostrarFontes: this.mostrarFontes.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"principal\",\n        children: [/*#__PURE__*/_jsxDEV(ComoJogar, {\n          visivel: this.state.comoJogar,\n          comoJogar: this.comoJogar.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Fontes, {\n          visivel: this.state.mostrarFontes,\n          mostrarFontes: this.mostrarFontes.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Bandeiras, {\n          bandeiras: this.state.bandeiras,\n          quaisCartas: this.state.quaisCartas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Informacao, {\n          info: this.state.informacaoNoCard,\n          InformacaoCategoria: this.InformacaoCategoria.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"mandanteJogarVisitante\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"liApp\",\n            children: /*#__PURE__*/_jsxDEV(Mandante, {\n              carta: this.state.mandante.carta,\n              JogadaMandante: this.JogadaMandante.bind(this),\n              visivel: this.state.mandante.visivel,\n              resultado: this.state.resultado.texto,\n              ultimaJogada: this.state.mandante.ultimaJogada,\n              placar: this.state.mandante.placar,\n              transicao: this.state.cartasEmTransicao,\n              InformacaoCategoria: this.InformacaoCategoria.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            class: \"liApp\",\n            children: [/*#__PURE__*/_jsxDEV(Placar, {\n              classe: this.state.jogoEmAndamento,\n              mandante: this.state.mandante.placar,\n              visitante: this.state.visitante.placar,\n              rodada: this.state.rodada,\n              rodadasTotais: this.state.rodadasTotais\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"jogar\",\n              children: /*#__PURE__*/_jsxDEV(Jogar, {\n                DistribuirCartas: this.DistribuirCartas.bind(this),\n                resultado: this.state.resultado,\n                jogoEmAndamento: this.state.jogoEmAndamento,\n                RecomeÃ§arJogo: this.RecomeÃ§arJogo.bind(this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Mesa, {\n              cartas: this.state.mesa,\n              jogoEmAndamento: this.state.jogoEmAndamento\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            class: \"liApp\",\n            children: /*#__PURE__*/_jsxDEV(Visitante, {\n              carta: this.state.visitante.carta,\n              visivel: this.state.visitante.visivel,\n              resultado: this.state.resultado.texto,\n              placar: this.state.visitante.placar,\n              transicao: this.state.cartasEmTransicao,\n              InformacaoCategoria: this.InformacaoCategoria.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 14\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/leandro/Desktop/projetos/idh/idh-antigo/idh-antigo/idh-jogo/src/App.js"],"names":["React","Component","Bandeiras","bd","ComoJogar","Header","Fontes","Informacao","Jogar","Mandante","Mesa","Visitante","stateInicial","Placar","App","constructor","state","InformacaoCategoria","categoria","setState","informacaoNoCard","PegarDoBanco","ids","Array","isArray","dados","map","i","length","id","push","pais","idh","exp","bandeira","populacao","Number","area","DistribuirCartas","indices","quaisCartas","novoIndice","e","index","estadoAntigo","mesa","mandante","carta","visivel","placar","ultimaJogada","visitante","jogoEmAndamento","bandeiras","BuscarBandeiras","cartasEmTransicao","rodada","rodadasTotais","array","arrayBandeiras","nome","sort","a","b","localeCompare","JogadaMandante","jogada","prevState","vencedor","CompararJogada","AlterarPlacar","resultado","texto","mensagemVencedor","setTimeout","escurecerBandeiras","ProximaJogada","b1","b2","cartas","FimDeJogo","novaMesa","vencedorFinal","RecomeÃ§arJogo","mandanteAtual","visitanteAtual","tipo","valorMandante","valorVisitante","comoJogar","x","mostrarFontes","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport './assets/reset.css';\r\nimport \"./assets/App.css\"\r\n\r\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\"\r\nimport bd from './bancoDeDados/bancoDeDados.js';\r\nimport ComoJogar from \"./components/ComoJogar/ComoJogar\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Fontes from \"./components/Fontes/Fontes\";\r\nimport Informacao from \"./components/Informacao/Informacao\";\r\nimport Jogar from \"./components/Jogar/Jogar\";\r\nimport Mandante from \"./components/Jogador/Mandante\";\r\nimport Mesa from \"./components/Mesa/Mesa\";\r\nimport Visitante from \"./components/Jogador/Visitante\";\r\nimport stateInicial from \"./stateInicial\";\r\nimport Placar from \"./components/Placar/Placar\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = stateInicial\r\n\r\n  }\r\n\r\n  InformacaoCategoria(categoria){\r\n   \r\n    if(!categoria){\r\n      this.setState({\r\n        informacaoNoCard:false\r\n      })\r\n    }\r\n    else{\r\n      this.setState({\r\n        informacaoNoCard:categoria\r\n      })\r\n    }\r\n  }\r\n\r\n  PegarDoBanco(ids) {\r\n\r\n    if (Array.isArray(ids)) {\r\n      const dados = []\r\n      ids.map((ids) => {\r\n        for (let i = 0; i < bd.length; i++) {\r\n          if (ids == bd[i].id) {\r\n            dados.push({\r\n              id: bd[i].id,\r\n              pais: bd[i].pais,\r\n              idh: bd[i].idh,\r\n              exp: bd[i].exp,\r\n              bandeira: bd[i].bandeira,\r\n              populacao:Number(bd[i].populacao),\r\n              area:Number(bd[i].area)\r\n\r\n            })\r\n          }\r\n        }\r\n      })\r\n\r\n      return dados\r\n    }\r\n    else {\r\n      return (\r\n        {\r\n          id: bd[ids].id,\r\n          pais: bd[ids].pais,\r\n          idh: bd[ids].idh,\r\n          exp: bd[ids].exp,\r\n          bandeira: bd[ids].bandeira,\r\n          populacao:Number(bd[ids].populacao),\r\n          area:Number(bd[ids].area)\r\n\r\n        }\r\n      )\r\n    }\r\n\r\n\r\n  }\r\n\r\n  DistribuirCartas(indices,quaisCartas) {\r\n    var novoIndice = []\r\n    indices.map((e, index) => index > 1 ? novoIndice.push(e) : '')\r\n    var estadoAntigo = this.state\r\n    \r\n    this.setState({\r\n      mesa: novoIndice,\r\n      mandante: {\r\n        carta: this.PegarDoBanco(indices[0]),\r\n        visivel: true,\r\n        placar: estadoAntigo.mandante.placar,\r\n        ultimaJogada: estadoAntigo.mandante.ultimaJogada\r\n      },\r\n      visitante: {\r\n        carta: this.PegarDoBanco(indices[1]),\r\n        visivel: false,\r\n        placar: estadoAntigo.visitante.placar\r\n      },\r\n      jogoEmAndamento: true,\r\n      bandeiras: this.BuscarBandeiras(indices),\r\n      cartasEmTransicao:false,\r\n      rodada:estadoAntigo.rodada + 1,\r\n      rodadasTotais:indices.length/2,\r\n      quaisCartas:quaisCartas\r\n\r\n    })\r\n  }\r\n\r\n  BuscarBandeiras(array) {\r\n    var arrayBandeiras = []\r\n    for (let i = 0; i < array.length; i++) {\r\n      arrayBandeiras.push({\r\n        id: array[i],\r\n        nome: bd[array[i]].pais,\r\n        bandeira: bd[array[i]].bandeira,\r\n        visivel: true\r\n      })\r\n    }\r\n\r\n    arrayBandeiras.sort(function(a,b){\r\n      return a.nome.localeCompare(b.nome)\r\n    })\r\n\r\n\r\n    return arrayBandeiras\r\n  }\r\n\r\n  JogadaMandante(jogada) {\r\n    let prevState = this.state\r\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada])\r\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar)\r\n    \r\n    this.setState({\r\n      mandante: {\r\n        carta: prevState.mandante.carta,\r\n        visivel: true,\r\n        placar: placar.mandante,\r\n        ultimaJogada: jogada\r\n      },\r\n      visitante: {\r\n        carta: prevState.visitante.carta,\r\n        visivel: true,\r\n        placar: placar.visitante\r\n      },\r\n      resultado: {\r\n        texto: placar.mensagemVencedor,\r\n        visivel: true\r\n      },\r\n      cartasEmTransicao:true\r\n     \r\n    })\r\n\r\n    setTimeout(() => {\r\n      this.escurecerBandeiras(this.state.mandante.carta.id, this.state.visitante.carta.id)\r\n       this.ProximaJogada(this.state.mesa)\r\n\r\n    }, 3000);\r\n\r\n  }\r\n\r\n  escurecerBandeiras(b1, b2) {\r\n    let bandeiras = this.state.bandeiras\r\n\r\n    bandeiras.map((e) => {\r\n      if (e.id == b1 | e.id == b2) {\r\n        e.visivel = false\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  ProximaJogada(cartas) {\r\n\r\n    if (cartas.length == 0) {\r\n      this.FimDeJogo()\r\n    }\r\n    else {\r\n      const prevState = this.state\r\n\r\n      let novaMesa = [];\r\n      cartas.map((e, index) => index > 1 ? novaMesa.push(e) : '')\r\n      \r\n      this.setState({\r\n        mesa: novaMesa,\r\n        mandante: {\r\n          carta: this.PegarDoBanco(cartas[0]),\r\n          visivel: true,\r\n          placar: prevState.mandante.placar,\r\n          ultimaJogada: null\r\n\r\n        },\r\n        visitante: {\r\n          carta: this.PegarDoBanco(cartas[1]),\r\n          visivel: false,\r\n          placar: prevState.visitante.placar\r\n        },\r\n        resultado: {\r\n          texto: null,\r\n          visivel: false,\r\n        },\r\n        cartasEmTransicao:false,\r\n        rodada: prevState.rodada + 1\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  FimDeJogo() {\r\n    \r\n    let mandante = this.state.mandante.placar\r\n    let visitante = this.state.visitante.placar\r\n    let vencedorFinal = ''\r\n    if (mandante == visitante) {\r\n      vencedorFinal = ('Fim de jogo: Empate!')\r\n    }\r\n    else if (mandante > visitante) {\r\n      vencedorFinal = ('Fim de jogo: Jogador 1 Venceu!')\r\n    }\r\n    else {\r\n      vencedorFinal = ('Fim de jogo: Jogador 2 Venceu!')\r\n    }\r\n\r\n    this.setState({\r\n      resultado: {\r\n        texto: vencedorFinal,\r\n        visivel: true\r\n      }\r\n    })\r\n  }\r\n\r\n  RecomeÃ§arJogo() {\r\n    this.setState(stateInicial)\r\n  }\r\n\r\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\r\n      let placar = {\r\n      mandante: mandanteAtual,\r\n      visitante: visitanteAtual,\r\n      mensagemVencedor: 'Empatou!'\r\n    }\r\n\r\n    if (vencedor == 'mandante') {\r\n      placar.mandante += 1\r\n      placar.mensagemVencedor = 'Ganhou!'\r\n      return placar\r\n\r\n\r\n    }\r\n    else if (vencedor == 'visitante') {\r\n      placar.visitante += 1\r\n      placar.mensagemVencedor = 'Perdeu!'\r\n      return placar\r\n\r\n    } else {\r\n      return placar\r\n    }\r\n\r\n  }\r\n\r\n  CompararJogada(tipo, valorMandante, valorVisitante) {\r\n   \r\n    if (tipo == 'idh' | tipo == 'exp' | tipo=='populacao'|tipo=='area') {\r\n      if (valorMandante == valorVisitante) {\r\n        return 'empate'\r\n      }\r\n      else if (valorMandante > valorVisitante) {\r\n        return 'mandante'\r\n      }\r\n      else {\r\n        return 'visitante'\r\n      }\r\n    }\r\n  }\r\n\r\n  comoJogar(x){\r\n    \r\n    this.setState({\r\n      comoJogar:x\r\n    })\r\n\r\n  }\r\n\r\n  mostrarFontes(x){\r\n    this.setState({\r\n      mostrarFontes:x\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"conteudo\" >\r\n\r\n        <header>\r\n          <Header comoJogar={this.comoJogar.bind(this)} mostrarFontes={this.mostrarFontes.bind(this)} />\r\n        </header>\r\n        <main className=\"principal\">\r\n        \r\n        <ComoJogar visivel={this.state.comoJogar} comoJogar={this.comoJogar.bind(this)}/>\r\n        <Fontes visivel={this.state.mostrarFontes} mostrarFontes={this.mostrarFontes.bind(this)}/>\r\n         \r\n            <Bandeiras bandeiras={this.state.bandeiras} quaisCartas={this.state.quaisCartas}/>\r\n         \r\n            <Informacao info={this.state.informacaoNoCard} InformacaoCategoria={this.InformacaoCategoria.bind(this)}/>\r\n\r\n          <ul id='mandanteJogarVisitante'>\r\n         \r\n            <li className='liApp'>\r\n            <Mandante carta={this.state.mandante.carta}  JogadaMandante={this.JogadaMandante.bind(this)} visivel={this.state.mandante.visivel} resultado={this.state.resultado.texto} ultimaJogada={this.state.mandante.ultimaJogada} placar={this.state.mandante.placar} transicao={this.state.cartasEmTransicao} InformacaoCategoria = {this.InformacaoCategoria.bind(this)}/>\r\n            </li>\r\n            <li class='liApp'>\r\n            <Placar classe={this.state.jogoEmAndamento} mandante={this.state.mandante.placar} visitante={this.state.visitante.placar} rodada={this.state.rodada} rodadasTotais={this.state.rodadasTotais}/>\r\n            <div class='jogar'>\r\n            <Jogar DistribuirCartas={this.DistribuirCartas.bind(this)} resultado={this.state.resultado} jogoEmAndamento={this.state.jogoEmAndamento} RecomeÃ§arJogo={this.RecomeÃ§arJogo.bind(this)} />\r\n            </div>\r\n                  \r\n            <Mesa cartas={this.state.mesa} jogoEmAndamento={this.state.jogoEmAndamento} />\r\n            </li>\r\n            <li class='liApp'>\r\n             <Visitante carta={this.state.visitante.carta} visivel={this.state.visitante.visivel} resultado={this.state.resultado.texto} placar={this.state.visitante.placar} transicao={this.state.cartasEmTransicao} InformacaoCategoria = {this.InformacaoCategoria.bind(this)}/>\r\n            </li>\r\n                 \r\n          </ul>\r\n \r\n        </main>\r\n      </section>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\n"]},"metadata":{},"sourceType":"module"}