{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Leandro Carvalho\\\\Desktop\\\\Projetos\\\\IDH\\\\idh-jogo\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './reset.css';\nimport './App2.css';\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\";\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Header from \"./components/Header/Header\";\nimport Informacao from \"./components/Informacao/Informacao\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport Mandante from \"./components/Jogador/Mandante\";\nimport Mesa from \"./components/Mesa/Mesa\";\nimport Footer from \"./components/Footer/Footer\";\nimport Visitante from \"./components/Jogador/Visitante\";\nimport stateInicial from \"./stateInicial\";\nimport Placar from \"./components/Placar/Placar\";\nimport ComoJogar from \"./components/ComoJogar/ComoJogar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = stateInicial;\n  }\n\n  InformacaoCategoria(categoria) {\n    if (!categoria) {\n      this.setState({\n        informacaoNoCard: false\n      });\n    } else {\n      this.setState({\n        informacaoNoCard: categoria\n      });\n    }\n  }\n\n  PegarDoBanco(ids) {\n    if (Array.isArray(ids)) {\n      const dados = [];\n      ids.map(ids => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              pais: bd[i].pais,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: bd[i].bandeira,\n              populacao: bd[i].populacao,\n              area: bd[i].area\n            });\n          }\n        }\n      });\n      return dados;\n    } else {\n      return {\n        id: bd[ids].id,\n        pais: bd[ids].pais,\n        idh: bd[ids].idh,\n        exp: bd[ids].exp,\n        bandeira: bd[ids].bandeira,\n        populacao: Number(bd[ids].populacao).toLocaleString('en').replaceAll(',', '.'),\n        area: Number(bd[ids].area).toLocaleString('en').replaceAll(',', '.')\n      };\n    }\n  }\n\n  DistribuirCartas(indices, quaisCartas) {\n    var novoIndice = [];\n    indices.map((e, index) => index > 1 ? novoIndice.push(e) : '');\n    var estadoAntigo = this.state;\n    this.setState({\n      mesa: novoIndice,\n      mandante: {\n        carta: this.PegarDoBanco(indices[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar,\n        ultimaJogada: estadoAntigo.mandante.ultimaJogada\n      },\n      visitante: {\n        carta: this.PegarDoBanco(indices[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n      jogoEmAndamento: true,\n      bandeiras: this.BuscarBandeiras(indices),\n      cartasEmTransicao: false,\n      rodada: estadoAntigo.rodada + 1,\n      rodadasTotais: indices.length / 2,\n      quaisCartas: quaisCartas\n    });\n  }\n\n  BuscarBandeiras(array) {\n    var arrayBandeiras = [];\n\n    for (let i = 0; i < array.length; i++) {\n      arrayBandeiras.push({\n        id: array[i],\n        nome: bd[array[i]].pais,\n        bandeira: bd[array[i]].bandeira,\n        visivel: true\n      });\n    }\n\n    arrayBandeiras.sort(function (a, b) {\n      return a.nome > b.nome ? 1 : b.nome > a.nome ? -1 : 0;\n    });\n    return arrayBandeiras;\n  }\n\n  JogadaMandante(jogada) {\n    let prevState = this.state;\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada]);\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar);\n    this.setState({\n      mandante: {\n        carta: prevState.mandante.carta,\n        visivel: true,\n        placar: placar.mandante,\n        ultimaJogada: jogada\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado: {\n        texto: placar.mensagemVencedor,\n        visivel: true\n      },\n      cartasEmTransicao: true\n    });\n    setTimeout(() => {\n      this.escurecerBandeiras(this.state.mandante.carta.id, this.state.visitante.carta.id);\n      this.ProximaJogada(this.state.mesa);\n    }, 3000);\n  }\n\n  escurecerBandeiras(b1, b2) {\n    let bandeiras = this.state.bandeiras;\n    bandeiras.map(e => {\n      if (e.id == b1 | e.id == b2) {\n        e.visivel = false;\n      }\n    });\n  }\n\n  ProximaJogada(cartas) {\n    if (cartas.length == 0) {\n      this.FimDeJogo();\n    } else {\n      const prevState = this.state;\n      let novaMesa = [];\n      cartas.map((e, index) => index > 1 ? novaMesa.push(e) : '');\n      this.setState({\n        mesa: novaMesa,\n        mandante: {\n          carta: this.PegarDoBanco(cartas[0]),\n          visivel: true,\n          placar: prevState.mandante.placar,\n          ultimaJogada: null\n        },\n        visitante: {\n          carta: this.PegarDoBanco(cartas[1]),\n          visivel: false,\n          placar: prevState.visitante.placar\n        },\n        resultado: {\n          texto: null,\n          visivel: false\n        },\n        cartasEmTransicao: false,\n        rodada: prevState.rodada + 1\n      });\n    }\n  }\n\n  FimDeJogo() {\n    let mandante = this.state.mandante.placar;\n    let visitante = this.state.visitante.placar;\n    let vencedorFinal = '';\n\n    if (mandante == visitante) {\n      vencedorFinal = 'Fim de jogo: Empate!';\n    } else if (mandante > visitante) {\n      vencedorFinal = 'Fim de jogo: Mandante Venceu!';\n    } else {\n      vencedorFinal = 'Fim de jogo: Visitante Venceu!';\n    }\n\n    this.setState({\n      resultado: {\n        texto: vencedorFinal,\n        visivel: true\n      }\n    });\n  }\n\n  RecomeçarJogo() {\n    this.setState(stateInicial);\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor: 'Empatou!'\n    };\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1;\n      placar.mensagemVencedor = 'Ganhou!';\n      return placar;\n    } else if (vencedor == 'visitante') {\n      placar.visitante += 1;\n      placar.mensagemVencedor = 'Perdeu!';\n      return placar;\n    } else {\n      return placar;\n    }\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp' | tipo == 'populacao' | tipo == 'area') {\n      if (valorMandante == valorVisitante) {\n        return 'empate';\n      } else if (valorMandante > valorVisitante) {\n        return 'mandante';\n      } else {\n        return 'visitante';\n      }\n    }\n  }\n\n  comoJogar() {\n    console.log('clicado em como jogar');\n    this.setState({\n      comoJogar: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"conteudo\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(Header, {\n          comoJogar: this.comoJogar.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"principal\",\n        children: [/*#__PURE__*/_jsxDEV(Bandeiras, {\n          bandeiras: this.state.bandeiras,\n          quaisCartas: this.state.quaisCartas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Informacao, {\n          info: this.state.informacaoNoCard,\n          InformacaoCategoria: this.InformacaoCategoria.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"mandanteJogarVisitante\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"liApp\",\n            children: /*#__PURE__*/_jsxDEV(Mandante, {\n              carta: this.state.mandante.carta,\n              JogadaMandante: this.JogadaMandante.bind(this),\n              visivel: this.state.mandante.visivel,\n              resultado: this.state.resultado.texto,\n              ultimaJogada: this.state.mandante.ultimaJogada,\n              placar: this.state.mandante.placar,\n              transicao: this.state.cartasEmTransicao,\n              InformacaoCategoria: this.InformacaoCategoria.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            class: \"liApp\",\n            children: [/*#__PURE__*/_jsxDEV(Placar, {\n              classe: this.state.jogoEmAndamento,\n              mandante: this.state.mandante.placar,\n              visitante: this.state.visitante.placar,\n              rodada: this.state.rodada,\n              rodadasTotais: this.state.rodadasTotais\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"jogar\",\n              children: /*#__PURE__*/_jsxDEV(Jogar, {\n                DistribuirCartas: this.DistribuirCartas.bind(this),\n                resultado: this.state.resultado,\n                jogoEmAndamento: this.state.jogoEmAndamento,\n                RecomeçarJogo: this.RecomeçarJogo.bind(this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Mesa, {\n              cartas: this.state.mesa,\n              jogoEmAndamento: this.state.jogoEmAndamento\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            class: \"liApp\",\n            children: /*#__PURE__*/_jsxDEV(Visitante, {\n              carta: this.state.visitante.carta,\n              visivel: this.state.visitante.visivel,\n              resultado: this.state.resultado.texto,\n              placar: this.state.visitante.placar,\n              transicao: this.state.cartasEmTransicao,\n              InformacaoCategoria: this.InformacaoCategoria.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 14\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"comoJogar\",\n          children: /*#__PURE__*/_jsxDEV(ComoJogar, {\n            visivel: this.state.comoJogar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Leandro Carvalho/Desktop/Projetos/IDH/idh-jogo/src/App.js"],"names":["React","Component","Bandeiras","bd","Header","Informacao","Jogar","Mandante","Mesa","Footer","Visitante","stateInicial","Placar","ComoJogar","App","constructor","state","InformacaoCategoria","categoria","setState","informacaoNoCard","PegarDoBanco","ids","Array","isArray","dados","map","i","length","id","push","pais","idh","exp","bandeira","populacao","area","Number","toLocaleString","replaceAll","DistribuirCartas","indices","quaisCartas","novoIndice","e","index","estadoAntigo","mesa","mandante","carta","visivel","placar","ultimaJogada","visitante","jogoEmAndamento","bandeiras","BuscarBandeiras","cartasEmTransicao","rodada","rodadasTotais","array","arrayBandeiras","nome","sort","a","b","JogadaMandante","jogada","prevState","vencedor","CompararJogada","AlterarPlacar","resultado","texto","mensagemVencedor","setTimeout","escurecerBandeiras","ProximaJogada","b1","b2","cartas","FimDeJogo","novaMesa","vencedorFinal","RecomeçarJogo","mandanteAtual","visitanteAtual","tipo","valorMandante","valorVisitante","comoJogar","console","log","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport './reset.css';\nimport './App2.css';\n\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\"\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Header from \"./components/Header/Header\";\nimport Informacao from \"./components/Informacao/Informacao\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport Mandante from \"./components/Jogador/Mandante\";\nimport Mesa from \"./components/Mesa/Mesa\";\nimport Footer from \"./components/Footer/Footer\";\nimport Visitante from \"./components/Jogador/Visitante\";\nimport stateInicial from \"./stateInicial\";\n\nimport Placar from \"./components/Placar/Placar\";\n\nimport ComoJogar from \"./components/ComoJogar/ComoJogar\"\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = stateInicial\n\n  }\n\n  InformacaoCategoria(categoria){\n   \n    if(!categoria){\n      this.setState({\n        informacaoNoCard:false\n      })\n    }\n    else{\n      this.setState({\n        informacaoNoCard:categoria\n      })\n    }\n  }\n\n  PegarDoBanco(ids) {\n\n    if (Array.isArray(ids)) {\n      const dados = []\n      ids.map((ids) => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              pais: bd[i].pais,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: bd[i].bandeira,\n              populacao:bd[i].populacao,\n              area:bd[i].area\n\n            })\n          }\n        }\n      })\n\n      return dados\n    }\n    else {\n      return (\n        {\n          id: bd[ids].id,\n          pais: bd[ids].pais,\n          idh: bd[ids].idh,\n          exp: bd[ids].exp,\n          bandeira: bd[ids].bandeira,\n          populacao:Number(bd[ids].populacao).toLocaleString('en').replaceAll(',','.'),\n          area:Number(bd[ids].area).toLocaleString('en').replaceAll(',','.')\n\n        }\n      )\n    }\n\n\n  }\n\n  DistribuirCartas(indices,quaisCartas) {\n    var novoIndice = []\n    indices.map((e, index) => index > 1 ? novoIndice.push(e) : '')\n    var estadoAntigo = this.state\n    \n    this.setState({\n      mesa: novoIndice,\n      mandante: {\n        carta: this.PegarDoBanco(indices[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar,\n        ultimaJogada: estadoAntigo.mandante.ultimaJogada\n      },\n      visitante: {\n        carta: this.PegarDoBanco(indices[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n      jogoEmAndamento: true,\n      bandeiras: this.BuscarBandeiras(indices),\n      cartasEmTransicao:false,\n      rodada:estadoAntigo.rodada + 1,\n      rodadasTotais:indices.length/2,\n      quaisCartas:quaisCartas\n\n    })\n  }\n\n  BuscarBandeiras(array) {\n    var arrayBandeiras = []\n    for (let i = 0; i < array.length; i++) {\n      arrayBandeiras.push({\n        id: array[i],\n        nome: bd[array[i]].pais,\n        bandeira: bd[array[i]].bandeira,\n        visivel: true\n      })\n    }\n\n    arrayBandeiras.sort(function (a, b) {\n\n      return (a.nome > b.nome) ? 1 : ((b.nome > a.nome) ? -1 : 0);\n\n    });\n    return arrayBandeiras\n  }\n\n  JogadaMandante(jogada) {\n    let prevState = this.state\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada])\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar)\n    \n    this.setState({\n      mandante: {\n        carta: prevState.mandante.carta,\n        visivel: true,\n        placar: placar.mandante,\n        ultimaJogada: jogada\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado: {\n        texto: placar.mensagemVencedor,\n        visivel: true\n      },\n      cartasEmTransicao:true\n     \n    })\n\n    setTimeout(() => {\n      this.escurecerBandeiras(this.state.mandante.carta.id, this.state.visitante.carta.id)\n       this.ProximaJogada(this.state.mesa)\n\n    }, 3000);\n\n  }\n\n  escurecerBandeiras(b1, b2) {\n    let bandeiras = this.state.bandeiras\n\n    bandeiras.map((e) => {\n      if (e.id == b1 | e.id == b2) {\n        e.visivel = false\n      }\n    })\n\n  }\n\n  ProximaJogada(cartas) {\n\n    if (cartas.length == 0) {\n      this.FimDeJogo()\n    }\n    else {\n      const prevState = this.state\n\n      let novaMesa = [];\n      cartas.map((e, index) => index > 1 ? novaMesa.push(e) : '')\n      \n      this.setState({\n        mesa: novaMesa,\n        mandante: {\n          carta: this.PegarDoBanco(cartas[0]),\n          visivel: true,\n          placar: prevState.mandante.placar,\n          ultimaJogada: null\n\n        },\n        visitante: {\n          carta: this.PegarDoBanco(cartas[1]),\n          visivel: false,\n          placar: prevState.visitante.placar\n        },\n        resultado: {\n          texto: null,\n          visivel: false,\n        },\n        cartasEmTransicao:false,\n        rodada: prevState.rodada + 1\n      })\n    }\n\n  }\n\n  FimDeJogo() {\n    \n    let mandante = this.state.mandante.placar\n    let visitante = this.state.visitante.placar\n    let vencedorFinal = ''\n    if (mandante == visitante) {\n      vencedorFinal = ('Fim de jogo: Empate!')\n    }\n    else if (mandante > visitante) {\n      vencedorFinal = ('Fim de jogo: Mandante Venceu!')\n    }\n    else {\n      vencedorFinal = ('Fim de jogo: Visitante Venceu!')\n    }\n\n    this.setState({\n      resultado: {\n        texto: vencedorFinal,\n        visivel: true\n      }\n    })\n  }\n\n  RecomeçarJogo() {\n    this.setState(stateInicial)\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n      let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor: 'Empatou!'\n    }\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1\n      placar.mensagemVencedor = 'Ganhou!'\n      return placar\n\n\n    }\n    else if (vencedor == 'visitante') {\n      placar.visitante += 1\n      placar.mensagemVencedor = 'Perdeu!'\n      return placar\n\n    } else {\n      return placar\n    }\n\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp' | tipo=='populacao'|tipo=='area') {\n      if (valorMandante == valorVisitante) {\n        return 'empate'\n      }\n      else if (valorMandante > valorVisitante) {\n        return 'mandante'\n      }\n      else {\n        return 'visitante'\n      }\n    }\n  }\n\n  comoJogar(){\n    console.log('clicado em como jogar')\n    this.setState({\n      comoJogar:true\n    })\n  }\n\n  render() {\n    return (\n      <section className=\"conteudo\" >\n\n        <header>\n          <Header comoJogar={this.comoJogar.bind(this)} />\n        </header>\n        <main className=\"principal\">\n         \n            <Bandeiras bandeiras={this.state.bandeiras} quaisCartas={this.state.quaisCartas}/>\n         \n            <Informacao info={this.state.informacaoNoCard} InformacaoCategoria={this.InformacaoCategoria.bind(this)}/>\n\n          <ul id='mandanteJogarVisitante'>\n         \n            <li className='liApp'>\n            <Mandante carta={this.state.mandante.carta}  JogadaMandante={this.JogadaMandante.bind(this)} visivel={this.state.mandante.visivel} resultado={this.state.resultado.texto} ultimaJogada={this.state.mandante.ultimaJogada} placar={this.state.mandante.placar} transicao={this.state.cartasEmTransicao} InformacaoCategoria = {this.InformacaoCategoria.bind(this)}/>\n            </li>\n            <li class='liApp'>\n            <Placar classe={this.state.jogoEmAndamento} mandante={this.state.mandante.placar} visitante={this.state.visitante.placar} rodada={this.state.rodada} rodadasTotais={this.state.rodadasTotais}/>\n            <div class='jogar'>\n            <Jogar DistribuirCartas={this.DistribuirCartas.bind(this)} resultado={this.state.resultado} jogoEmAndamento={this.state.jogoEmAndamento} RecomeçarJogo={this.RecomeçarJogo.bind(this)} />\n            </div>\n                  \n            <Mesa cartas={this.state.mesa} jogoEmAndamento={this.state.jogoEmAndamento} />\n            </li>\n            <li class='liApp'>\n             <Visitante carta={this.state.visitante.carta} visivel={this.state.visitante.visivel} resultado={this.state.resultado.texto} placar={this.state.visitante.placar} transicao={this.state.cartasEmTransicao} InformacaoCategoria = {this.InformacaoCategoria.bind(this)}/>\n            </li>\n                 \n          </ul>\n          <div id='comoJogar'>\n        <ComoJogar visivel={this.state.comoJogar}/>\n\n          </div>\n        </main>\n{/*         <footer>\n          <Footer />\n        </footer> */}\n\n      </section>\n    )\n  }\n\n\n}\n\n\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}