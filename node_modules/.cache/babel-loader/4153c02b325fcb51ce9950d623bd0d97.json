{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Leandro Carvalho\\\\Desktop\\\\Projetos\\\\IDH\\\\idh-jogo\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Card from \"./components/Card/Card\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Baralho from \"./components/Baralho/Baralho\";\nimport Mandante from \"./components/Jogador/Mandante\";\nimport Visitante from \"./components/Jogador/Visitante\";\nimport Cabecalho from \"./components/cabecalho/Cabecalho\";\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\";\nimport { findFlagUrlByCountryName } from \"country-flags-svg\";\nimport Placar from \"./components/Placar/Placar\";\nimport NumeroDeCartas from \"./components/Jogar/NumeroDeCartas\";\nimport Mesa from \"./components/Mesa/Mesa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar fs = require('fs');\n\nvar path = require('path'); //ideia -> Pegar os primeiros elementos dos arrays para jogar\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mesa: Array.from({\n        length: bd.length\n      }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada: null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false\n      },\n      efeitoCartas: false,\n      jogoEmAndamento: false,\n      bandeiras: false\n    };\n  }\n\n  TodosIds() {\n    let todosIds = [];\n\n    for (let i = 0; i < bd.length; i++) {\n      todosIds.push(bd[i].id);\n    }\n\n    return todosIds;\n  }\n\n  PegarDoBanco(ids) {\n    if (Array.isArray(ids)) {\n      const dados = [];\n      ids.map(ids => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              pais: bd[i].pais,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: bd[i].bandeira\n            });\n          }\n        }\n      });\n      return dados;\n    } else {\n      return {\n        id: bd[ids].id,\n        pais: bd[ids].pais,\n        idh: bd[ids].idh,\n        exp: bd[ids].exp,\n        bandeira: bd[ids].bandeira\n      };\n    }\n  }\n\n  DistribuirCartas(indices) {\n    console.log('ordem das cartas', indices);\n    console.log('state mesa inicio', this.state.mesa);\n    var novoIndice = [];\n    indices.map((e, index) => index > 1 ? novoIndice.push(e) : '');\n    console.log('novoIndice é', novoIndice);\n    var estadoAntigo = this.state;\n    this.setState({\n      mesa: novoIndice,\n      mandante: {\n        carta: this.PegarDoBanco(indices[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar,\n        ultimaJogada: estadoAntigo.mandante.ultimaJogada\n      },\n      visitante: {\n        carta: this.PegarDoBanco(indices[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n      jogoEmAndamento: true,\n      bandeiras: this.BuscarBandeiras(indices)\n    });\n    setTimeout(() => {\n      console.log('man', this.state.mandante.carta, 'vis', this.state.visitante.carta);\n      console.log('state mesa fim', this.state.mesa);\n    }, 2000);\n  }\n\n  BuscarBandeiras(array) {\n    var arrayBandeiras = [];\n\n    for (let i = 0; i < array.length; i++) {\n      arrayBandeiras.push({\n        id: array[i],\n        nome: bd[array[i]].pais,\n        bandeira: bd[array[i]].bandeira,\n        visivel: true\n      });\n    }\n\n    arrayBandeiras.sort(function (a, b) {\n      return a.nome > b.nome ? 1 : b.nome > a.nome ? -1 : 0;\n    });\n    return arrayBandeiras;\n  }\n\n  JogadaMandante(jogada) {\n    console.log('estou no app e jogada é', jogada);\n    let prevState = this.state;\n    let buscarValor = this.state.mandante.carta[jogada];\n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada]);\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar);\n    this.setState({\n      mandante: {\n        carta: prevState.mandante.carta,\n        visivel: true,\n        placar: placar.mandante,\n        ultimaJogada: jogada\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado: {\n        texto: placar.mensagemVencedor,\n        visivel: true\n      },\n      efeitoCartas: true\n    });\n    setTimeout(() => {\n      this.escurecerBandeiras(this.state.mandante.carta.id, this.state.visitante.carta.id);\n      this.ProximaJogada(this.state.mesa);\n    }, 3000);\n  }\n\n  escurecerBandeiras(b1, b2) {\n    let band = this.state.bandeiras;\n    band.map(e => {\n      if (e.id == b1 | e.id == b2) {\n        e.visivel = false;\n      }\n    });\n    console.log('band é', band);\n    /*   this.setState({\n        bandeiras:band\n      }) */\n  }\n\n  ProximaJogada(cartas) {\n    console.log('cartas inicio', cartas);\n\n    if (cartas.length == 0) {\n      this.FimDeJogo();\n    } else {\n      const prevState = this.state;\n      let novaMesa = [];\n      cartas.map((e, index) => index > 1 ? novaMesa.push(e) : '');\n      this.setState({\n        mesa: novaMesa,\n        mandante: {\n          carta: this.PegarDoBanco(cartas[0]),\n          visivel: true,\n          placar: prevState.mandante.placar,\n          ultimaJogada: null\n        },\n        visitante: {\n          carta: this.PegarDoBanco(cartas[1]),\n          visivel: false,\n          placar: prevState.visitante.placar\n        },\n        resultado: {\n          texto: null,\n          visivel: false\n        }\n      });\n    }\n  }\n\n  FimDeJogo() {\n    console.log('acabou a porra do jogo');\n    let m = this.state.mandante.placar;\n    let v = this.state.visitante.placar;\n    let vencedorFinal = '';\n\n    if (m == v) {\n      vencedorFinal = 'Fim de jogo: Empate!';\n    } else if (m.v) {\n      vencedorFinal = 'Fim de jogo: Mandante Venceu!';\n    } else {\n      vencedorFinal = 'Fim de jogo: Visitante Venceu!';\n    }\n\n    this.setState({\n      resultado: {\n        texto: vencedorFinal,\n        visivel: true\n      }\n    });\n  }\n\n  RecomeçarJogo() {\n    console.log('funcionando o recomeçar jogo');\n    var primeiroEstado = {\n      mesa: Array.from({\n        length: bd.length\n      }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada: null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false\n      },\n      efeitoCartas: false,\n      jogoEmAndamento: false,\n      bandeiras: false\n    };\n    this.setState(primeiroEstado);\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n    console.log('this.state no alterar placar', this.state);\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor: 'Empatou!'\n    };\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1;\n      placar.mensagemVencedor = 'Ganhou!';\n      return placar;\n    } else if (vencedor == 'visitante') {\n      placar.visitante += 1;\n      placar.mensagemVencedor = 'Perdeu!';\n      return placar;\n    } else {\n      return placar;\n    }\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp') {\n      if (valorMandante == valorVisitante) {\n        return 'empate';\n      } else if (valorMandante > valorVisitante) {\n        return 'mandante';\n      } else {\n        return 'visitante';\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"conteudo\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"cabecalho\",\n        children: /*#__PURE__*/_jsxDEV(Cabecalho, {\n          vencedorFinal: this.state.vencedorFinal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bandeiras\",\n        children: /*#__PURE__*/_jsxDEV(Bandeiras, {\n          bandeiras: this.state.bandeiras\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"principal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"mandante\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Mandante\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Mandante, {\n            carta: this.state.mandante.carta,\n            JogadaMandante: this.JogadaMandante.bind(this),\n            visivel: this.state.mandante.visivel,\n            resultado: this.state.resultado.texto,\n            ultimaJogada: this.state.mandante.ultimaJogada\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"visitante\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Visitante\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Visitante, {\n            carta: this.state.visitante.carta,\n            visivel: this.state.visitante.visivel,\n            resultado: this.state.resultado.texto\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"jogar\",\n          children: [/*#__PURE__*/_jsxDEV(Jogar, {\n            DistribuirCartas: this.DistribuirCartas.bind(this),\n            resultado: this.state.resultado,\n            jogoEmAndamento: this.state.jogoEmAndamento,\n            RecomeçarJogo: this.RecomeçarJogo.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Mesa, {\n            cartas: this.state.mesa\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"placar\",\n        children: /*#__PURE__*/_jsxDEV(Placar, {\n          placarMandante: this.state.mandante.placar,\n          placarVisitante: this.state.visitante.placar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n{\n  /* <Bandeiras bandeirasInicio={this.BandeirasInicio()} /> */\n}\nexport default App;","map":{"version":3,"sources":["C:/Users/Leandro Carvalho/Desktop/Projetos/IDH/idh-jogo/src/App.js"],"names":["React","Component","Card","Jogar","bd","Baralho","Mandante","Visitante","Cabecalho","Bandeiras","findFlagUrlByCountryName","Placar","NumeroDeCartas","Mesa","fs","require","path","App","constructor","state","mesa","Array","from","length","v","k","mandante","carta","visivel","placar","ultimaJogada","visitante","resultado","texto","efeitoCartas","jogoEmAndamento","bandeiras","TodosIds","todosIds","i","push","id","PegarDoBanco","ids","isArray","dados","map","pais","idh","exp","bandeira","DistribuirCartas","indices","console","log","novoIndice","e","index","estadoAntigo","setState","BuscarBandeiras","setTimeout","array","arrayBandeiras","nome","sort","a","b","JogadaMandante","jogada","prevState","buscarValor","vencedor","CompararJogada","AlterarPlacar","mensagemVencedor","escurecerBandeiras","ProximaJogada","b1","b2","band","cartas","FimDeJogo","novaMesa","m","vencedorFinal","RecomeçarJogo","primeiroEstado","mandanteAtual","visitanteAtual","tipo","valorMandante","valorVisitante","render","bind"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,EAAP,MAAe,kCAAf;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAASC,wBAAT,QAAyC,mBAAzC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB,C,CAMA;;;AAEA,MAAME,GAAN,SAAkBhB,SAAlB,CAA4B;AAC1BiB,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAEC,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAEnB,EAAE,CAACmB;AAAb,OAAX,EAAkC,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,CAAhD,CADK;AAEXC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,IADC;AAERC,QAAAA,OAAO,EAAE,KAFD;AAGRC,QAAAA,MAAM,EAAE,CAHA;AAIRC,QAAAA,YAAY,EAAC;AAJL,OAFC;AAQXC,MAAAA,SAAS,EAAE;AACTJ,QAAAA,KAAK,EAAE,IADE;AAETC,QAAAA,OAAO,EAAE,KAFA;AAGTC,QAAAA,MAAM,EAAE;AAHC,OARA;AAaXG,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,IADE;AAETL,QAAAA,OAAO,EAAE;AAFA,OAbA;AAiBXM,MAAAA,YAAY,EAAC,KAjBF;AAkBXC,MAAAA,eAAe,EAAC,KAlBL;AAmBXC,MAAAA,SAAS,EAAC;AAnBC,KAAb;AAuBD;;AAKDC,EAAAA,QAAQ,GAAG;AAET,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnC,EAAE,CAACmB,MAAvB,EAA+BgB,CAAC,EAAhC,EAAoC;AAClCD,MAAAA,QAAQ,CAACE,IAAT,CAAcpC,EAAE,CAACmC,CAAD,CAAF,CAAME,EAApB;AACD;;AAGD,WAAOH,QAAP;AACD;;AAEDI,EAAAA,YAAY,CAACC,GAAD,EAAM;AAEhB,QAAItB,KAAK,CAACuB,OAAN,CAAcD,GAAd,CAAJ,EAAwB;AACtB,YAAME,KAAK,GAAG,EAAd;AACAF,MAAAA,GAAG,CAACG,GAAJ,CAASH,GAAD,IAAS;AACf,aAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnC,EAAE,CAACmB,MAAvB,EAA+BgB,CAAC,EAAhC,EAAoC;AAClC,cAAII,GAAG,IAAIvC,EAAE,CAACmC,CAAD,CAAF,CAAME,EAAjB,EAAqB;AACnBI,YAAAA,KAAK,CAACL,IAAN,CAAW;AACTC,cAAAA,EAAE,EAAErC,EAAE,CAACmC,CAAD,CAAF,CAAME,EADD;AAETM,cAAAA,IAAI,EAAE3C,EAAE,CAACmC,CAAD,CAAF,CAAMQ,IAFH;AAGTC,cAAAA,GAAG,EAAE5C,EAAE,CAACmC,CAAD,CAAF,CAAMS,GAHF;AAITC,cAAAA,GAAG,EAAE7C,EAAE,CAACmC,CAAD,CAAF,CAAMU,GAJF;AAKTC,cAAAA,QAAQ,EAAE9C,EAAE,CAACmC,CAAD,CAAF,CAAMW;AALP,aAAX;AAQD;AACF;AACF,OAbD;AAeA,aAAOL,KAAP;AACD,KAlBD,MAmBK;AACH,aACE;AACEJ,QAAAA,EAAE,EAAErC,EAAE,CAACuC,GAAD,CAAF,CAAQF,EADd;AAEEM,QAAAA,IAAI,EAAE3C,EAAE,CAACuC,GAAD,CAAF,CAAQI,IAFhB;AAGEC,QAAAA,GAAG,EAAE5C,EAAE,CAACuC,GAAD,CAAF,CAAQK,GAHf;AAIEC,QAAAA,GAAG,EAAE7C,EAAE,CAACuC,GAAD,CAAF,CAAQM,GAJf;AAKEC,QAAAA,QAAQ,EAAE9C,EAAE,CAACuC,GAAD,CAAF,CAAQO;AALpB,OADF;AASD;AAGF;;AAEDC,EAAAA,gBAAgB,CAACC,OAAD,EAAU;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BF,OAA/B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgC,KAAKnC,KAAL,CAAWC,IAA3C;AAIA,QAAImC,UAAU,GAAG,EAAjB;AACAH,IAAAA,OAAO,CAACN,GAAR,CAAY,CAACU,CAAD,EAAGC,KAAH,KAAYA,KAAK,GAAG,CAAR,GAAYF,UAAU,CAACf,IAAX,CAAgBgB,CAAhB,CAAZ,GAAiC,EAAzD;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BC,UAA3B;AAGA,QAAIG,YAAY,GAAG,KAAKvC,KAAxB;AAIA,SAAKwC,QAAL,CAAc;AACZvC,MAAAA,IAAI,EAAEmC,UADM;AAEZ7B,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,KAAKe,YAAL,CAAkBU,OAAO,CAAC,CAAD,CAAzB,CADC;AAERxB,QAAAA,OAAO,EAAE,IAFD;AAGRC,QAAAA,MAAM,EAAE6B,YAAY,CAAChC,QAAb,CAAsBG,MAHtB;AAIRC,QAAAA,YAAY,EAAC4B,YAAY,CAAChC,QAAb,CAAsBI;AAJ3B,OAFE;AAQZC,MAAAA,SAAS,EAAE;AACTJ,QAAAA,KAAK,EAAE,KAAKe,YAAL,CAAkBU,OAAO,CAAC,CAAD,CAAzB,CADE;AAETxB,QAAAA,OAAO,EAAE,KAFA;AAGTC,QAAAA,MAAM,EAAE6B,YAAY,CAAC3B,SAAb,CAAuBF;AAHtB,OARC;AAaZM,MAAAA,eAAe,EAAC,IAbJ;AAcZC,MAAAA,SAAS,EAAC,KAAKwB,eAAL,CAAqBR,OAArB;AAdE,KAAd;AAkBFS,IAAAA,UAAU,CAAC,MAAM;AACjBR,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkB,KAAKnC,KAAL,CAAWO,QAAX,CAAoBC,KAAtC,EAA4C,KAA5C,EAAkD,KAAKR,KAAL,CAAWY,SAAX,CAAqBJ,KAAvE;AACA0B,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6B,KAAKnC,KAAL,CAAWC,IAAxC;AACC,KAHS,EAGP,IAHO,CAAV;AAKC;;AAIDwC,EAAAA,eAAe,CAACE,KAAD,EAAO;AACpB,QAAIC,cAAc,GAAG,EAArB;;AACA,SAAI,IAAIxB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACuB,KAAK,CAACvC,MAApB,EAA2BgB,CAAC,EAA5B,EAA+B;AAC7BwB,MAAAA,cAAc,CAACvB,IAAf,CAAoB;AAClBC,QAAAA,EAAE,EAACqB,KAAK,CAACvB,CAAD,CADU;AAElByB,QAAAA,IAAI,EAAE5D,EAAE,CAAC0D,KAAK,CAACvB,CAAD,CAAN,CAAF,CAAaQ,IAFD;AAGlBG,QAAAA,QAAQ,EAAE9C,EAAE,CAAC0D,KAAK,CAACvB,CAAD,CAAN,CAAF,CAAaW,QAHL;AAIlBtB,QAAAA,OAAO,EAAE;AAJS,OAApB;AAMD;;AAEDmC,IAAAA,cAAc,CAACE,IAAf,CAAoB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAElC,aAAQD,CAAC,CAACF,IAAF,GAASG,CAAC,CAACH,IAAZ,GAAoB,CAApB,GAA0BG,CAAC,CAACH,IAAF,GAASE,CAAC,CAACF,IAAZ,GAAoB,CAAC,CAArB,GAAyB,CAAzD;AAED,KAJD;AAKA,WAAOD,cAAP;AACD;;AAIDK,EAAAA,cAAc,CAACC,MAAD,EAAS;AACrBhB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCe,MAAvC;AAEA,QAAIC,SAAS,GAAG,KAAKnD,KAArB;AAEA,QAAIoD,WAAW,GAAG,KAAKpD,KAAL,CAAWO,QAAX,CAAoBC,KAApB,CAA0B0C,MAA1B,CAAlB;AAEA,QAAIG,QAAQ,GAAG,KAAKC,cAAL,CAAoBJ,MAApB,EAA4B,KAAKlD,KAAL,CAAWO,QAAX,CAAoBC,KAApB,CAA0B0C,MAA1B,CAA5B,EAA+D,KAAKlD,KAAL,CAAWY,SAAX,CAAqBJ,KAArB,CAA2B0C,MAA3B,CAA/D,CAAf;AACA,QAAIxC,MAAM,GAAG,KAAK6C,aAAL,CAAmBF,QAAnB,EAA6B,KAAKrD,KAAL,CAAWO,QAAX,CAAoBG,MAAjD,EAAyD,KAAKV,KAAL,CAAWY,SAAX,CAAqBF,MAA9E,CAAb;AAIA,SAAK8B,QAAL,CAAc;AACZjC,MAAAA,QAAQ,EAAC;AACPC,QAAAA,KAAK,EAAC2C,SAAS,CAAC5C,QAAV,CAAmBC,KADlB;AAEPC,QAAAA,OAAO,EAAC,IAFD;AAGPC,QAAAA,MAAM,EAACA,MAAM,CAACH,QAHP;AAIPI,QAAAA,YAAY,EAACuC;AAJN,OADG;AAOZtC,MAAAA,SAAS,EAAE;AACTJ,QAAAA,KAAK,EAAE2C,SAAS,CAACvC,SAAV,CAAoBJ,KADlB;AAETC,QAAAA,OAAO,EAAE,IAFA;AAGTC,QAAAA,MAAM,EAAEA,MAAM,CAACE;AAHN,OAPC;AAYZC,MAAAA,SAAS,EAAC;AACRC,QAAAA,KAAK,EAACJ,MAAM,CAAC8C,gBADL;AAER/C,QAAAA,OAAO,EAAC;AAFA,OAZE;AAgBZM,MAAAA,YAAY,EAAC;AAhBD,KAAd;AAmBA2B,IAAAA,UAAU,CAAC,MAAM;AACjB,WAAKe,kBAAL,CAAwB,KAAKzD,KAAL,CAAWO,QAAX,CAAoBC,KAApB,CAA0Bc,EAAlD,EAAqD,KAAKtB,KAAL,CAAWY,SAAX,CAAqBJ,KAArB,CAA2Bc,EAAhF;AACA,WAAKoC,aAAL,CAAmB,KAAK1D,KAAL,CAAWC,IAA9B;AAEC,KAJS,EAIP,IAJO,CAAV;AAMD;;AAEDwD,EAAAA,kBAAkB,CAACE,EAAD,EAAIC,EAAJ,EAAO;AACvB,QAAIC,IAAI,GAAG,KAAK7D,KAAL,CAAWiB,SAAtB;AAEA4C,IAAAA,IAAI,CAAClC,GAAL,CAAUU,CAAD,IAAK;AACZ,UAAGA,CAAC,CAACf,EAAF,IAAQqC,EAAR,GAAatB,CAAC,CAACf,EAAF,IAAMsC,EAAtB,EAAyB;AACvBvB,QAAAA,CAAC,CAAC5B,OAAF,GAAY,KAAZ;AACD;AACF,KAJD;AAMAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqB0B,IAArB;AAEF;AACF;AACA;AAEG;;AAEDH,EAAAA,aAAa,CAACI,MAAD,EAAQ;AACnB5B,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4B2B,MAA5B;;AACA,QAAGA,MAAM,CAAC1D,MAAP,IAAe,CAAlB,EAAoB;AAClB,WAAK2D,SAAL;AACD,KAFD,MAGI;AACF,YAAMZ,SAAS,GAAG,KAAKnD,KAAvB;AAEA,UAAIgE,QAAQ,GAAG,EAAf;AACAF,MAAAA,MAAM,CAACnC,GAAP,CAAW,CAACU,CAAD,EAAGC,KAAH,KAAYA,KAAK,GAAG,CAAR,GAAY0B,QAAQ,CAAC3C,IAAT,CAAcgB,CAAd,CAAZ,GAA+B,EAAtD;AAKA,WAAKG,QAAL,CAAc;AACZvC,QAAAA,IAAI,EAAC+D,QADO;AAEZzD,QAAAA,QAAQ,EAAC;AACTC,UAAAA,KAAK,EAAE,KAAKe,YAAL,CAAkBuC,MAAM,CAAC,CAAD,CAAxB,CADE;AAETrD,UAAAA,OAAO,EAAE,IAFA;AAGTC,UAAAA,MAAM,EAAEyC,SAAS,CAAC5C,QAAV,CAAmBG,MAHlB;AAITC,UAAAA,YAAY,EAAC;AAJJ,SAFG;AASZC,QAAAA,SAAS,EAAC;AACVJ,UAAAA,KAAK,EAAE,KAAKe,YAAL,CAAkBuC,MAAM,CAAC,CAAD,CAAxB,CADG;AAEVrD,UAAAA,OAAO,EAAE,KAFC;AAGVC,UAAAA,MAAM,EAAEyC,SAAS,CAACvC,SAAV,CAAoBF;AAHlB,SATE;AAcZG,QAAAA,SAAS,EAAE;AACXC,UAAAA,KAAK,EAAE,IADI;AAEXL,UAAAA,OAAO,EAAE;AAFE;AAdC,OAAd;AAmBD;AAEF;;AAEDsD,EAAAA,SAAS,GAAE;AACT7B,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,QAAI8B,CAAC,GAAG,KAAKjE,KAAL,CAAWO,QAAX,CAAoBG,MAA5B;AACA,QAAIL,CAAC,GAAG,KAAKL,KAAL,CAAWY,SAAX,CAAqBF,MAA7B;AACA,QAAIwD,aAAa,GAAC,EAAlB;;AACA,QAAGD,CAAC,IAAE5D,CAAN,EAAQ;AACN6D,MAAAA,aAAa,GAAG,sBAAhB;AACD,KAFD,MAGK,IAAGD,CAAC,CAAC5D,CAAL,EAAO;AACV6D,MAAAA,aAAa,GAAG,+BAAhB;AACD,KAFI,MAGD;AACFA,MAAAA,aAAa,GAAG,gCAAhB;AACD;;AAED,SAAK1B,QAAL,CAAc;AACZ3B,MAAAA,SAAS,EAAC;AACRC,QAAAA,KAAK,EAACoD,aADE;AAERzD,QAAAA,OAAO,EAAC;AAFA;AADE,KAAd;AAMD;;AAED0D,EAAAA,aAAa,GAAE;AACbjC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,QAAIiC,cAAc,GAAG;AACnBnE,MAAAA,IAAI,EAAEC,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAEnB,EAAE,CAACmB;AAAb,OAAX,EAAkC,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,CAAhD,CADa;AAEnBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,IADC;AAERC,QAAAA,OAAO,EAAE,KAFD;AAGRC,QAAAA,MAAM,EAAE,CAHA;AAIRC,QAAAA,YAAY,EAAC;AAJL,OAFS;AAQnBC,MAAAA,SAAS,EAAE;AACTJ,QAAAA,KAAK,EAAE,IADE;AAETC,QAAAA,OAAO,EAAE,KAFA;AAGTC,QAAAA,MAAM,EAAE;AAHC,OARQ;AAanBG,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,IADE;AAETL,QAAAA,OAAO,EAAE;AAFA,OAbQ;AAiBnBM,MAAAA,YAAY,EAAC,KAjBM;AAkBnBC,MAAAA,eAAe,EAAC,KAlBG;AAmBnBC,MAAAA,SAAS,EAAC;AAnBS,KAArB;AAqBA,SAAKuB,QAAL,CAAc4B,cAAd;AACD;;AAEDb,EAAAA,aAAa,CAACF,QAAD,EAAWgB,aAAX,EAA0BC,cAA1B,EAA0C;AACrDpC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C,KAAKnC,KAAjD;AAEA,QAAIU,MAAM,GAAG;AACXH,MAAAA,QAAQ,EAAE8D,aADC;AAEXzD,MAAAA,SAAS,EAAE0D,cAFA;AAGXd,MAAAA,gBAAgB,EAAC;AAHN,KAAb;;AAMA,QAAIH,QAAQ,IAAI,UAAhB,EAA4B;AAC1B3C,MAAAA,MAAM,CAACH,QAAP,IAAmB,CAAnB;AACAG,MAAAA,MAAM,CAAC8C,gBAAP,GAAwB,SAAxB;AACA,aAAO9C,MAAP;AAGD,KAND,MAOK,IAAI2C,QAAQ,IAAI,WAAhB,EAA6B;AAChC3C,MAAAA,MAAM,CAACE,SAAP,IAAoB,CAApB;AACAF,MAAAA,MAAM,CAAC8C,gBAAP,GAAwB,SAAxB;AACA,aAAO9C,MAAP;AAED,KALI,MAKE;AACL,aAAOA,MAAP;AACD;AAEF;;AAED4C,EAAAA,cAAc,CAACiB,IAAD,EAAOC,aAAP,EAAsBC,cAAtB,EAAsC;AAClD,QAAIF,IAAI,IAAI,KAAR,GAAgBA,IAAI,IAAI,KAA5B,EAAmC;AACjC,UAAIC,aAAa,IAAIC,cAArB,EAAqC;AACnC,eAAO,QAAP;AACD,OAFD,MAGK,IAAID,aAAa,GAAGC,cAApB,EAAoC;AACvC,eAAO,UAAP;AACD,OAFI,MAGA;AACH,eAAO,WAAP;AACD;AACF;AACF;;AAGDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAS,MAAA,SAAS,EAAC,UAAnB;AAAA,8BAEE;AAAK,QAAA,EAAE,EAAC,WAAR;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,aAAa,EAAE,KAAK1E,KAAL,CAAWkE;AAArC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AAAK,QAAA,EAAE,EAAC,WAAR;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,SAAS,EAAE,KAAKlE,KAAL,CAAWiB;AAAjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF,eAQE;AAAK,QAAA,EAAE,EAAC,WAAR;AAAA,gCAEE;AAAK,UAAA,EAAE,EAAC,UAAR;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,QAAD;AAAU,YAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWO,QAAX,CAAoBC,KAArC;AAA4C,YAAA,cAAc,EAAE,KAAKyC,cAAL,CAAoB0B,IAApB,CAAyB,IAAzB,CAA5D;AAA4F,YAAA,OAAO,EAAE,KAAK3E,KAAL,CAAWO,QAAX,CAAoBE,OAAzH;AAAkI,YAAA,SAAS,EAAE,KAAKT,KAAL,CAAWa,SAAX,CAAqBC,KAAlK;AAAyK,YAAA,YAAY,EAAE,KAAKd,KAAL,CAAWO,QAAX,CAAoBI;AAA3M;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAME;AAAK,UAAA,EAAE,EAAC,WAAR;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAE,KAAKX,KAAL,CAAWY,SAAX,CAAqBJ,KAAvC;AAA8C,YAAA,OAAO,EAAE,KAAKR,KAAL,CAAWY,SAAX,CAAqBH,OAA5E;AAAqF,YAAA,SAAS,EAAE,KAAKT,KAAL,CAAWa,SAAX,CAAqBC;AAArH;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,eAUE;AAAK,UAAA,EAAE,EAAC,OAAR;AAAA,kCAEE,QAAC,KAAD;AAAO,YAAA,gBAAgB,EAAE,KAAKkB,gBAAL,CAAsB2C,IAAtB,CAA2B,IAA3B,CAAzB;AAA2D,YAAA,SAAS,EAAE,KAAK3E,KAAL,CAAWa,SAAjF;AAA4F,YAAA,eAAe,EAAE,KAAKb,KAAL,CAAWgB,eAAxH;AAAyI,YAAA,aAAa,EAAE,KAAKmD,aAAL,CAAmBQ,IAAnB,CAAwB,IAAxB;AAAxJ;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,IAAD;AAAM,YAAA,MAAM,EAAE,KAAK3E,KAAL,CAAWC;AAAzB;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,eAwBE;AAAK,QAAA,EAAE,EAAC,QAAR;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,cAAc,EAAE,KAAKD,KAAL,CAAWO,QAAX,CAAoBG,MAA5C;AAAoD,UAAA,eAAe,EAAE,KAAKV,KAAL,CAAWY,SAAX,CAAqBF;AAA1F;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiCD;;AAxWyB;;AA6W5B;AAAC;AAA6D;AAE9D,eAAeZ,GAAf","sourcesContent":["import React, { Component } from \"react\"\nimport './App.css';\nimport Card from \"./components/Card/Card\";\nimport Jogar from \"./components/Jogar/Jogar\";\nimport bd from './bancoDeDados/bancoDeDados.json';\nimport Baralho from \"./components/Baralho/Baralho\"\nimport Mandante from \"./components/Jogador/Mandante\"\nimport Visitante from \"./components/Jogador/Visitante\"\nimport Cabecalho from \"./components/cabecalho/Cabecalho\";\nimport Bandeiras from \"./components/Bandeiras/Bandeiras\"\nimport { findFlagUrlByCountryName } from \"country-flags-svg\";\nimport Placar from \"./components/Placar/Placar\";\nimport NumeroDeCartas from \"./components/Jogar/NumeroDeCartas\"\n\nimport Mesa from \"./components/Mesa/Mesa\"\n\nvar fs = require('fs');\nvar path = require('path');\n\n\n\n\n\n//ideia -> Pegar os primeiros elementos dos arrays para jogar\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      mesa: Array.from({ length: bd.length }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada:null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false,\n      },\n      efeitoCartas:false,\n      jogoEmAndamento:false,\n      bandeiras:false\n      \n\n    }\n  }\n \n\n\n\n  TodosIds() {\n\n    let todosIds = []\n    for (let i = 0; i < bd.length; i++) {\n      todosIds.push(bd[i].id)\n    }\n\n\n    return todosIds\n  }\n\n  PegarDoBanco(ids) {\n\n    if (Array.isArray(ids)) {\n      const dados = []\n      ids.map((ids) => {\n        for (let i = 0; i < bd.length; i++) {\n          if (ids == bd[i].id) {\n            dados.push({\n              id: bd[i].id,\n              pais: bd[i].pais,\n              idh: bd[i].idh,\n              exp: bd[i].exp,\n              bandeira: bd[i].bandeira\n\n            })\n          }\n        }\n      })\n\n      return dados\n    }\n    else {\n      return (\n        {\n          id: bd[ids].id,\n          pais: bd[ids].pais,\n          idh: bd[ids].idh,\n          exp: bd[ids].exp,\n          bandeira: bd[ids].bandeira\n        }\n      )\n    }\n\n\n  }\n\n  DistribuirCartas(indices) {\n    console.log('ordem das cartas',indices)\n    console.log('state mesa inicio',this.state.mesa)\n\n \n\n    var novoIndice = []\n    indices.map((e,index)=> index > 1 ? novoIndice.push(e) : '')\n    console.log('novoIndice é',novoIndice)\n    \n\n    var estadoAntigo = this.state\n\n    \n    \n    this.setState({\n      mesa: novoIndice,\n      mandante: {\n        carta: this.PegarDoBanco(indices[0]),\n        visivel: true,\n        placar: estadoAntigo.mandante.placar,\n        ultimaJogada:estadoAntigo.mandante.ultimaJogada\n      },\n      visitante: {\n        carta: this.PegarDoBanco(indices[1]),\n        visivel: false,\n        placar: estadoAntigo.visitante.placar\n      },\n      jogoEmAndamento:true,\n      bandeiras:this.BuscarBandeiras(indices)\n\n    })\n\n  setTimeout(() => {\n  console.log('man',this.state.mandante.carta,'vis',this.state.visitante.carta)  \n  console.log('state mesa fim',this.state.mesa)\n  }, 2000);\n\n  }\n\n\n\n  BuscarBandeiras(array){\n    var arrayBandeiras = []\n    for(let i=0;i<array.length;i++){\n      arrayBandeiras.push({\n        id:array[i],\n        nome: bd[array[i]].pais,\n        bandeira: bd[array[i]].bandeira,\n        visivel: true\n      })\n    }\n\n    arrayBandeiras.sort(function (a, b) {\n\t\n      return (a.nome > b.nome) ? 1 : ((b.nome > a.nome) ? -1 : 0);\n     \n    });\n    return arrayBandeiras\n  }\n\n\n\n  JogadaMandante(jogada) {\n    console.log('estou no app e jogada é', jogada)\n\n    let prevState = this.state\n\n    let buscarValor = this.state.mandante.carta[jogada]\n    \n    let vencedor = this.CompararJogada(jogada, this.state.mandante.carta[jogada], this.state.visitante.carta[jogada])\n    let placar = this.AlterarPlacar(vencedor, this.state.mandante.placar, this.state.visitante.placar)\n    \n\n\n    this.setState({\n      mandante:{\n        carta:prevState.mandante.carta,\n        visivel:true,\n        placar:placar.mandante,\n        ultimaJogada:jogada\n      },\n      visitante: {\n        carta: prevState.visitante.carta,\n        visivel: true,\n        placar: placar.visitante\n      },\n      resultado:{\n        texto:placar.mensagemVencedor,\n        visivel:true\n      },\n      efeitoCartas:true\n    })\n\n    setTimeout(() => {\n    this.escurecerBandeiras(this.state.mandante.carta.id,this.state.visitante.carta.id)\n    this.ProximaJogada(this.state.mesa)\n      \n    }, 3000);\n  \n  }\n\n  escurecerBandeiras(b1,b2){\n    let band = this.state.bandeiras\n\n    band.map((e)=>{\n      if(e.id == b1 | e.id==b2){\n        e.visivel = false\n      }\n    })\n\n    console.log('band é',band)\n  \n  /*   this.setState({\n      bandeiras:band\n    }) */\n\n  }\n\n  ProximaJogada(cartas){\n    console.log('cartas inicio',cartas)\n    if(cartas.length==0){\n      this.FimDeJogo()\n    }\n    else{\n      const prevState = this.state\n       \n      let novaMesa = [];\n      cartas.map((e,index)=> index > 1 ? novaMesa.push(e) : '')\n      \n      \n\n      \n      this.setState({\n        mesa:novaMesa,\n        mandante:{\n        carta: this.PegarDoBanco(cartas[0]),\n        visivel: true,\n        placar: prevState.mandante.placar,\n        ultimaJogada:null\n\n        },\n        visitante:{\n        carta: this.PegarDoBanco(cartas[1]),\n        visivel: false,\n        placar: prevState.visitante.placar\n        },\n        resultado: {\n        texto: null,\n        visivel: false,\n      }\n      })\n    }\n    \n  }\n\n  FimDeJogo(){\n    console.log('acabou a porra do jogo')\n    let m = this.state.mandante.placar\n    let v = this.state.visitante.placar\n    let vencedorFinal=''\n    if(m==v){\n      vencedorFinal =('Fim de jogo: Empate!')\n    }\n    else if(m.v){\n      vencedorFinal =('Fim de jogo: Mandante Venceu!')\n    }\n    else{\n      vencedorFinal =('Fim de jogo: Visitante Venceu!')\n    }\n\n    this.setState({\n      resultado:{\n        texto:vencedorFinal,\n        visivel:true\n      }\n    })\n  }\n\n  RecomeçarJogo(){\n    console.log('funcionando o recomeçar jogo')\n    var primeiroEstado = {\n      mesa: Array.from({ length: bd.length }, (v, k) => k + 1),\n      mandante: {\n        carta: null,\n        visivel: false,\n        placar: 0,\n        ultimaJogada:null\n      },\n      visitante: {\n        carta: null,\n        visivel: false,\n        placar: 0\n      },\n      resultado: {\n        texto: null,\n        visivel: false,\n      },\n      efeitoCartas:false,\n      jogoEmAndamento:false,\n      bandeiras:false\n    }\n    this.setState(primeiroEstado)\n  }\n\n  AlterarPlacar(vencedor, mandanteAtual, visitanteAtual) {\n    console.log('this.state no alterar placar', this.state)\n\n    let placar = {\n      mandante: mandanteAtual,\n      visitante: visitanteAtual,\n      mensagemVencedor:'Empatou!'\n    }\n\n    if (vencedor == 'mandante') {\n      placar.mandante += 1\n      placar.mensagemVencedor='Ganhou!'\n      return placar\n\n\n    }\n    else if (vencedor == 'visitante') {\n      placar.visitante += 1\n      placar.mensagemVencedor='Perdeu!'\n      return placar\n\n    } else {\n      return placar\n    }\n\n  }\n\n  CompararJogada(tipo, valorMandante, valorVisitante) {\n    if (tipo == 'idh' | tipo == 'exp') {\n      if (valorMandante == valorVisitante) {\n        return 'empate'\n      }\n      else if (valorMandante > valorVisitante) {\n        return 'mandante'\n      }\n      else {\n        return 'visitante'\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <section className=\"conteudo\" >\n       \n        <div id='cabecalho'>\n          <Cabecalho vencedorFinal={this.state.vencedorFinal}/>\n        </div>\n        <div id='bandeiras'>\n          <Bandeiras bandeiras={this.state.bandeiras} />\n        </div>\n        <div id=\"principal\">\n\n          <div id='mandante' >\n            <h2>Mandante</h2>\n            <Mandante carta={this.state.mandante.carta} JogadaMandante={this.JogadaMandante.bind(this)} visivel={this.state.mandante.visivel} resultado={this.state.resultado.texto} ultimaJogada={this.state.mandante.ultimaJogada} />\n          </div>\n          <div id='visitante'>\n            <h2>Visitante</h2>\n            <Visitante carta={this.state.visitante.carta} visivel={this.state.visitante.visivel} resultado={this.state.resultado.texto} />\n          </div>\n          <div id='jogar'>\n           \n            <Jogar DistribuirCartas={this.DistribuirCartas.bind(this)} resultado={this.state.resultado} jogoEmAndamento={this.state.jogoEmAndamento} RecomeçarJogo={this.RecomeçarJogo.bind(this)} />\n            <Mesa cartas={this.state.mesa} />\n          </div>\n        </div>\n        <div id='placar'>\n          <Placar placarMandante={this.state.mandante.placar} placarVisitante={this.state.visitante.placar} />\n        </div>\n\n\n\n      </section>\n    )\n  }\n\n\n}\n\n{/* <Bandeiras bandeirasInicio={this.BandeirasInicio()} /> */}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}